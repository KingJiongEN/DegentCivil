{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Degent Civilization","text":"<p>Welcome to the Degent Civilization documentation! This service provides a sophisticated backend system for simulating town operations with AI-driven characters, real-time interactions, and dynamic state management.</p>"},{"location":"#overview","title":"Overview","text":"<p>Degent Civilization is a powerful backend service that creates a living, breathing virtual town environment. It combines advanced AI technologies with real-time simulation to create dynamic and interactive town scenarios.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>AI-Driven Characters: Intelligent NPCs with autonomous behavior and decision-making capabilities</li> <li>Dynamic State Management: Sophisticated state system for managing character behaviors and interactions</li> <li>Real-time Simulation: Live updates and interactions within the town environment</li> <li>Memory System: Advanced memory management for character experiences and knowledge</li> <li>Building System: Flexible building management and interaction system</li> <li>LLM Integration: Seamless integration with Large Language Models for natural interactions</li> </ul>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>\ud83d\ude80 Quick Start Guide</li> <li>\ud83d\udcda Core Concepts</li> <li>\ud83d\udd27 API Reference</li> <li>\ud83d\udca1 Examples</li> </ul>"},{"location":"#system-requirements","title":"System Requirements","text":"<ul> <li>Python 3.8 or higher</li> <li>Docker (for Milvus and Redis)</li> <li>OpenAI API access (or compatible LLM service)</li> </ul>"},{"location":"#support","title":"Support","text":"<p>If you encounter any issues or have questions:</p> <ol> <li>Check our Troubleshooting Guide</li> <li>Search through Examples</li> <li>Review the API Reference</li> <li>Raise an issue on our GitHub repository</li> </ol>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"advanced-topics/custom-states/","title":"Custom States","text":"<p>Custom states in DegentCivil allow you to extend the behavior of characters by implementing new state patterns. This guide will walk you through creating and implementing custom states.</p>"},{"location":"advanced-topics/custom-states/#overview","title":"Overview","text":"<p>States represent different behaviors and activities that characters can engage in. Each state defines:</p> <ul> <li>Entry conditions</li> <li>Exit conditions</li> <li>State-specific behaviors</li> <li>Transitions to other states</li> </ul>"},{"location":"advanced-topics/custom-states/#creating-a-custom-state","title":"Creating a Custom State","text":""},{"location":"advanced-topics/custom-states/#1-basic-structure","title":"1. Basic Structure","text":"<p>Create a new class that inherits from the base state class:</p> <pre><code>from app.service.character_state.base_state import BaseState\n\nclass MyCustomState(BaseState):\n    def __init__(self):\n        super().__init__()\n        self.state_name = \"my_custom_state\"\n</code></pre>"},{"location":"advanced-topics/custom-states/#2-required-methods","title":"2. Required Methods","text":"<p>Implement these essential methods:</p> <pre><code>def enter(self, character):\n    \"\"\"Called when character enters this state\"\"\"\n    pass\n\ndef execute(self, character):\n    \"\"\"Main state logic, called each tick\"\"\"\n    pass\n\ndef exit(self, character):\n    \"\"\"Called when character exits this state\"\"\"\n    pass\n\ndef should_transition(self, character):\n    \"\"\"Define conditions for transitioning to other states\"\"\"\n    return False, None\n</code></pre>"},{"location":"advanced-topics/custom-states/#state-registration","title":"State Registration","text":"<p>Register your custom state in the state manager:</p> <pre><code>from app.service.character_state.state_manager import StateManager\n\nStateManager.register_state(\"my_custom_state\", MyCustomState)\n</code></pre>"},{"location":"advanced-topics/custom-states/#example-implementation","title":"Example Implementation","text":"<p>Here's a complete example of a custom \"Shopping\" state:</p> <pre><code>class ShoppingState(BaseState):\n    def __init__(self):\n        super().__init__()\n        self.state_name = \"shopping\"\n        self.shopping_duration = 30  # minutes\n        self.start_time = None\n\n    def enter(self, character):\n        self.start_time = character.current_time\n        character.memory.add_event(f\"Started shopping at {character.current_location}\")\n\n    def execute(self, character):\n        # Shopping logic\n        if character.inventory.has_space():\n            character.inventory.add_items(self.get_shopping_items())\n\n        # Update character's needs\n        character.energy -= 0.1\n        character.money -= 5\n\n    def exit(self, character):\n        character.memory.add_event(\"Finished shopping\")\n\n    def should_transition(self, character):\n        # Transition conditions\n        if character.current_time - self.start_time &gt;= self.shopping_duration:\n            return True, \"idle\"\n        if character.energy &lt; 20:\n            return True, \"resting\"\n        return False, None\n</code></pre>"},{"location":"advanced-topics/custom-states/#best-practices","title":"Best Practices","text":"<ol> <li>State Naming: Use clear, descriptive names for your states</li> <li>Memory Management: Always update character memory with significant events</li> <li>Resource Management: Handle character resources (energy, money, etc.) carefully</li> <li>Transition Logic: Keep transition conditions clear and well-defined</li> <li>Error Handling: Implement proper error handling for state-specific operations</li> </ol>"},{"location":"advanced-topics/custom-states/#integration-with-other-systems","title":"Integration with Other Systems","text":"<p>Custom states can interact with various systems:</p> <ul> <li>Memory System</li> <li>Building System</li> <li>Inventory System</li> <li>Social System</li> </ul>"},{"location":"advanced-topics/custom-states/#testing-custom-states","title":"Testing Custom States","text":"<p>Create unit tests for your custom states:</p> <pre><code>def test_shopping_state():\n    character = Character()\n    state = ShoppingState()\n\n    # Test enter\n    state.enter(character)\n    assert character.memory.has_event(\"Started shopping\")\n\n    # Test execute\n    state.execute(character)\n    assert character.inventory.has_items()\n\n    # Test transitions\n    should_transition, next_state = state.should_transition(character)\n    assert should_transition == False\n</code></pre>"},{"location":"advanced-topics/custom-states/#common-pitfalls","title":"Common Pitfalls","text":"<ol> <li>Forgetting to register states</li> <li>Not handling resource depletion</li> <li>Infinite state loops</li> <li>Missing error handling</li> <li>Poor transition logic</li> </ol>"},{"location":"advanced-topics/custom-states/#advanced-features","title":"Advanced Features","text":""},{"location":"advanced-topics/custom-states/#state-priorities","title":"State Priorities","text":"<pre><code>def get_priority(self):\n    return 5  # Higher number = higher priority\n</code></pre>"},{"location":"advanced-topics/custom-states/#state-dependencies","title":"State Dependencies","text":"<pre><code>def check_dependencies(self, character):\n    return character.has_money and character.has_inventory_space\n</code></pre>"},{"location":"advanced-topics/custom-states/#state-interruption","title":"State Interruption","text":"<pre><code>def can_be_interrupted(self):\n    return True  # Allow state interruption\n</code></pre>"},{"location":"advanced-topics/custom-states/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Keep state logic efficient</li> <li>Minimize memory operations</li> <li>Cache frequently accessed data</li> <li>Use appropriate data structures</li> </ul>"},{"location":"advanced-topics/custom-states/#debugging-tips","title":"Debugging Tips","text":"<ol> <li>Use logging for state transitions</li> <li>Monitor resource usage</li> <li>Track state duration</li> <li>Validate state conditions</li> <li>Check memory leaks </li> </ol>"},{"location":"advanced-topics/database-management/","title":"Database Management","text":"<p>This guide covers advanced database management techniques for DegentCivil, including optimization, maintenance, and best practices.</p>"},{"location":"advanced-topics/database-management/#database-architecture","title":"Database Architecture","text":"<p>DegentCivil uses a flexible database architecture that supports multiple storage backends:</p> <ol> <li>SQLite (default for local development)</li> <li>PostgreSQL (recommended for production)</li> <li>MongoDB (optional for specific use cases)</li> </ol>"},{"location":"advanced-topics/database-management/#basic-setup","title":"Basic Setup","text":""},{"location":"advanced-topics/database-management/#sqlite-configuration","title":"SQLite Configuration","text":"<pre><code>from app.database import Database\n\ndb_config = {\n    'type': 'sqlite',\n    'path': 'simulation.db',\n    'journal_mode': 'WAL'\n}\n\ndb = Database(db_config)\n</code></pre>"},{"location":"advanced-topics/database-management/#postgresql-configuration","title":"PostgreSQL Configuration","text":"<pre><code>db_config = {\n    'type': 'postgresql',\n    'host': 'localhost',\n    'port': 5432,\n    'database': 'degent_civil',\n    'user': 'username',\n    'password': 'password',\n    'max_connections': 20\n}\n</code></pre>"},{"location":"advanced-topics/database-management/#data-models","title":"Data Models","text":""},{"location":"advanced-topics/database-management/#character-data","title":"Character Data","text":"<pre><code>class CharacterModel:\n    table_name = 'characters'\n    schema = {\n        'id': 'UUID PRIMARY KEY',\n        'name': 'TEXT NOT NULL',\n        'age': 'INTEGER',\n        'occupation': 'TEXT',\n        'location_id': 'UUID REFERENCES locations(id)',\n        'state': 'JSONB',\n        'created_at': 'TIMESTAMP',\n        'updated_at': 'TIMESTAMP'\n    }\n    indexes = [\n        ('name_idx', 'name'),\n        ('location_idx', 'location_id'),\n        ('state_idx', 'state', 'gin')\n    ]\n</code></pre>"},{"location":"advanced-topics/database-management/#memory-storage","title":"Memory Storage","text":"<pre><code>class MemoryModel:\n    table_name = 'memories'\n    schema = {\n        'id': 'UUID PRIMARY KEY',\n        'character_id': 'UUID REFERENCES characters(id)',\n        'content': 'TEXT',\n        'importance': 'FLOAT',\n        'timestamp': 'TIMESTAMP',\n        'metadata': 'JSONB'\n    }\n    indexes = [\n        ('character_timestamp_idx', ['character_id', 'timestamp']),\n        ('importance_idx', 'importance')\n    ]\n</code></pre>"},{"location":"advanced-topics/database-management/#query-optimization","title":"Query Optimization","text":""},{"location":"advanced-topics/database-management/#index-management","title":"Index Management","text":"<pre><code>class IndexManager:\n    def __init__(self, database):\n        self.db = database\n\n    def create_indexes(self):\n        \"\"\"Create optimized indexes based on common queries\"\"\"\n        queries = [\n            \"\"\"\n            CREATE INDEX IF NOT EXISTS char_location_idx \n            ON characters (location_id) \n            WHERE active = true\n            \"\"\",\n            \"\"\"\n            CREATE INDEX IF NOT EXISTS memory_importance_idx \n            ON memories (importance) \n            WHERE importance &gt; 0.7\n            \"\"\"\n        ]\n        for query in queries:\n            self.db.execute(query)\n\n    def analyze_index_usage(self):\n        \"\"\"Monitor and analyze index usage patterns\"\"\"\n        return self.db.execute(\"\"\"\n            SELECT schemaname, tablename, indexname, idx_scan, idx_tup_read\n            FROM pg_stat_user_indexes\n            ORDER BY idx_scan DESC\n        \"\"\")\n</code></pre>"},{"location":"advanced-topics/database-management/#query-planning","title":"Query Planning","text":"<pre><code>class QueryPlanner:\n    def optimize_query(self, query):\n        \"\"\"Analyze and optimize query execution plan\"\"\"\n        explain_query = f\"EXPLAIN ANALYZE {query}\"\n        plan = self.db.execute(explain_query)\n\n        if self.needs_optimization(plan):\n            return self.rewrite_query(query)\n        return query\n\n    def needs_optimization(self, plan):\n        \"\"\"Check if query plan needs optimization\"\"\"\n        return (\n            self.has_sequential_scan(plan) or\n            self.has_high_cost(plan) or\n            self.has_poor_row_estimate(plan)\n        )\n</code></pre>"},{"location":"advanced-topics/database-management/#performance-tuning","title":"Performance Tuning","text":""},{"location":"advanced-topics/database-management/#connection-pooling","title":"Connection Pooling","text":"<pre><code>from psycopg2 import pool\n\nclass ConnectionPool:\n    def __init__(self, config):\n        self.pool = pool.SimpleConnectionPool(\n            minconn=5,\n            maxconn=20,\n            **config\n        )\n\n    def get_connection(self):\n        return self.pool.getconn()\n\n    def return_connection(self, conn):\n        self.pool.putconn(conn)\n\n    def close_all(self):\n        self.pool.closeall()\n</code></pre>"},{"location":"advanced-topics/database-management/#query-caching","title":"Query Caching","text":"<pre><code>class QueryCache:\n    def __init__(self):\n        self.cache = {}\n        self.ttl = 300  # 5 minutes\n\n    def get(self, query, params=None):\n        key = self.generate_key(query, params)\n        if key in self.cache:\n            entry = self.cache[key]\n            if not self.is_expired(entry):\n                return entry['data']\n        return None\n\n    def set(self, query, params, data):\n        key = self.generate_key(query, params)\n        self.cache[key] = {\n            'data': data,\n            'timestamp': time.time()\n        }\n</code></pre>"},{"location":"advanced-topics/database-management/#data-migration","title":"Data Migration","text":""},{"location":"advanced-topics/database-management/#migration-manager","title":"Migration Manager","text":"<pre><code>class MigrationManager:\n    def __init__(self, database):\n        self.db = database\n        self.migrations_table = 'schema_migrations'\n\n    def create_migrations_table(self):\n        self.db.execute(\"\"\"\n            CREATE TABLE IF NOT EXISTS schema_migrations (\n                version VARCHAR(255) PRIMARY KEY,\n                applied_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n            )\n        \"\"\")\n\n    def apply_migrations(self, migrations_dir):\n        \"\"\"Apply pending migrations\"\"\"\n        applied = self.get_applied_migrations()\n        pending = self.get_pending_migrations(migrations_dir)\n\n        for migration in pending:\n            self.apply_migration(migration)\n            self.record_migration(migration)\n</code></pre>"},{"location":"advanced-topics/database-management/#data-backup","title":"Data Backup","text":"<pre><code>class BackupManager:\n    def create_backup(self, path):\n        \"\"\"Create database backup\"\"\"\n        if self.db.type == 'postgresql':\n            os.system(f'pg_dump {self.db.name} &gt; {path}')\n        elif self.db.type == 'sqlite':\n            import shutil\n            shutil.copy2(self.db.path, path)\n\n    def restore_backup(self, path):\n        \"\"\"Restore database from backup\"\"\"\n        if self.db.type == 'postgresql':\n            os.system(f'psql {self.db.name} &lt; {path}')\n        elif self.db.type == 'sqlite':\n            import shutil\n            shutil.copy2(path, self.db.path)\n</code></pre>"},{"location":"advanced-topics/database-management/#maintenance","title":"Maintenance","text":""},{"location":"advanced-topics/database-management/#database-cleanup","title":"Database Cleanup","text":"<pre><code>class DatabaseMaintenance:\n    def cleanup_old_data(self):\n        \"\"\"Remove old, unnecessary data\"\"\"\n        queries = [\n            \"\"\"\n            DELETE FROM memories \n            WHERE importance &lt; 0.1 \n            AND timestamp &lt; NOW() - INTERVAL '30 days'\n            \"\"\",\n            \"\"\"\n            DELETE FROM character_states \n            WHERE updated_at &lt; NOW() - INTERVAL '7 days'\n            \"\"\"\n        ]\n        for query in queries:\n            self.db.execute(query)\n\n    def vacuum_database(self):\n        \"\"\"Reclaim storage and update statistics\"\"\"\n        self.db.execute(\"VACUUM ANALYZE\")\n</code></pre>"},{"location":"advanced-topics/database-management/#monitoring","title":"Monitoring","text":"<pre><code>class DatabaseMonitor:\n    def check_health(self):\n        \"\"\"Check database health metrics\"\"\"\n        metrics = {\n            'connection_count': self.get_connection_count(),\n            'database_size': self.get_database_size(),\n            'cache_hit_ratio': self.get_cache_hit_ratio(),\n            'slow_queries': self.get_slow_queries()\n        }\n        return metrics\n\n    def get_slow_queries(self):\n        return self.db.execute(\"\"\"\n            SELECT query, calls, total_time, rows\n            FROM pg_stat_statements\n            ORDER BY total_time DESC\n            LIMIT 10\n        \"\"\")\n</code></pre>"},{"location":"advanced-topics/database-management/#best-practices","title":"Best Practices","text":"<ol> <li>Regular Maintenance</li> <li>Schedule regular cleanup tasks</li> <li>Monitor database size</li> <li>Update statistics regularly</li> <li> <p>Backup data frequently</p> </li> <li> <p>Query Optimization</p> </li> <li>Use appropriate indexes</li> <li>Optimize complex queries</li> <li>Monitor query performance</li> <li> <p>Use prepared statements</p> </li> <li> <p>Connection Management</p> </li> <li>Use connection pooling</li> <li>Close unused connections</li> <li>Monitor connection usage</li> <li> <p>Set appropriate timeouts</p> </li> <li> <p>Data Integrity</p> </li> <li>Use transactions appropriately</li> <li>Implement proper constraints</li> <li>Validate data before insertion</li> <li> <p>Handle errors gracefully</p> </li> <li> <p>Security</p> </li> <li>Use strong authentication</li> <li>Encrypt sensitive data</li> <li>Regular security audits</li> <li>Proper access control </li> </ol>"},{"location":"advanced-topics/performance/","title":"Performance Optimization","text":"<p>This guide covers advanced techniques for optimizing the performance of your DegentCivil simulation.</p>"},{"location":"advanced-topics/performance/#performance-overview","title":"Performance Overview","text":"<p>DegentCivil's performance is influenced by several key factors:</p> <ol> <li>Number of active characters</li> <li>Complexity of character states</li> <li>Memory system usage</li> <li>Database operations</li> <li>LLM API calls</li> <li>Event processing</li> <li>Physical simulation calculations</li> </ol>"},{"location":"advanced-topics/performance/#optimization-strategies","title":"Optimization Strategies","text":""},{"location":"advanced-topics/performance/#1-character-management","title":"1. Character Management","text":""},{"location":"advanced-topics/performance/#batch-processing","title":"Batch Processing","text":"<pre><code>def process_characters_in_batches(characters, batch_size=100):\n    for i in range(0, len(characters), batch_size):\n        batch = characters[i:i+batch_size]\n        process_character_batch(batch)\n</code></pre>"},{"location":"advanced-topics/performance/#state-optimization","title":"State Optimization","text":"<pre><code>class OptimizedState(BaseState):\n    def __init__(self):\n        super().__init__()\n        self.cached_data = {}\n\n    def execute(self, character):\n        if self.should_update_cache():\n            self.cached_data = self.heavy_computation()\n        return self.cached_data\n</code></pre>"},{"location":"advanced-topics/performance/#2-memory-system","title":"2. Memory System","text":""},{"location":"advanced-topics/performance/#memory-pruning","title":"Memory Pruning","text":"<pre><code>def optimize_memory(character):\n    # Remove old, less relevant memories\n    character.memory.prune_old_memories(threshold_days=30)\n\n    # Compress similar memories\n    character.memory.compress_similar_memories()\n\n    # Archive rarely accessed memories\n    character.memory.archive_inactive_memories()\n</code></pre>"},{"location":"advanced-topics/performance/#efficient-querying","title":"Efficient Querying","text":"<pre><code>def query_memory(character, query, limit=10):\n    # Use indexed fields for faster queries\n    return character.memory.query(\n        query,\n        limit=limit,\n        use_cache=True,\n        index_fields=['timestamp', 'importance']\n    )\n</code></pre>"},{"location":"advanced-topics/performance/#3-database-optimization","title":"3. Database Optimization","text":""},{"location":"advanced-topics/performance/#connection-pooling","title":"Connection Pooling","text":"<pre><code>from app.database import Database\n\nclass OptimizedDatabase(Database):\n    def __init__(self):\n        self.connection_pool = create_connection_pool(\n            min_connections=5,\n            max_connections=20,\n            idle_timeout=300\n        )\n</code></pre>"},{"location":"advanced-topics/performance/#query-optimization","title":"Query Optimization","text":"<pre><code>class QueryOptimizer:\n    def __init__(self):\n        self.query_cache = {}\n\n    def optimize_query(self, query):\n        # Use prepared statements\n        if query in self.query_cache:\n            return self.query_cache[query]\n\n        # Analyze and optimize new queries\n        optimized = self.analyze_and_optimize(query)\n        self.query_cache[query] = optimized\n        return optimized\n</code></pre>"},{"location":"advanced-topics/performance/#4-llm-integration","title":"4. LLM Integration","text":""},{"location":"advanced-topics/performance/#token-management","title":"Token Management","text":"<pre><code>class TokenManager:\n    def __init__(self, max_tokens=4096):\n        self.max_tokens = max_tokens\n\n    def optimize_prompt(self, prompt):\n        # Truncate and optimize prompt to fit token limit\n        return self.truncate_to_token_limit(prompt)\n\n    def batch_requests(self, prompts):\n        # Combine similar prompts to reduce API calls\n        return self.combine_similar_prompts(prompts)\n</code></pre>"},{"location":"advanced-topics/performance/#response-caching","title":"Response Caching","text":"<pre><code>class LLMCache:\n    def __init__(self):\n        self.cache = {}\n\n    def get_response(self, prompt):\n        cache_key = self.generate_cache_key(prompt)\n        if cache_key in self.cache:\n            return self.cache[cache_key]\n\n        response = self.call_llm_api(prompt)\n        self.cache[cache_key] = response\n        return response\n</code></pre>"},{"location":"advanced-topics/performance/#monitoring-and-profiling","title":"Monitoring and Profiling","text":""},{"location":"advanced-topics/performance/#1-performance-metrics","title":"1. Performance Metrics","text":"<pre><code>class PerformanceMonitor:\n    def __init__(self):\n        self.metrics = {\n            'character_updates': [],\n            'memory_operations': [],\n            'database_queries': [],\n            'llm_calls': []\n        }\n\n    def record_metric(self, category, duration):\n        self.metrics[category].append({\n            'timestamp': time.time(),\n            'duration': duration\n        })\n\n    def analyze_performance(self):\n        return {\n            category: self.calculate_statistics(data)\n            for category, data in self.metrics.items()\n        }\n</code></pre>"},{"location":"advanced-topics/performance/#2-profiling-tools","title":"2. Profiling Tools","text":"<pre><code>import cProfile\nimport pstats\n\ndef profile_simulation(simulation, duration):\n    profiler = cProfile.Profile()\n    profiler.enable()\n\n    simulation.run(duration)\n\n    profiler.disable()\n    stats = pstats.Stats(profiler).sort_stats('cumulative')\n    return stats\n</code></pre>"},{"location":"advanced-topics/performance/#memory-management","title":"Memory Management","text":""},{"location":"advanced-topics/performance/#1-memory-pooling","title":"1. Memory Pooling","text":"<pre><code>class MemoryPool:\n    def __init__(self, initial_size=1000):\n        self.pool = [None] * initial_size\n        self.available = set(range(initial_size))\n\n    def allocate(self):\n        if not self.available:\n            self.expand_pool()\n        return self.pool[self.available.pop()]\n\n    def release(self, index):\n        self.available.add(index)\n</code></pre>"},{"location":"advanced-topics/performance/#2-garbage-collection","title":"2. Garbage Collection","text":"<pre><code>import gc\n\ndef optimize_memory_usage():\n    # Run garbage collection\n    gc.collect()\n\n    # Disable automatic garbage collection\n    gc.disable()\n\n    # Manual collection at specific intervals\n    def scheduled_gc():\n        gc.collect()\n        schedule_next_gc()\n</code></pre>"},{"location":"advanced-topics/performance/#configuration-optimization","title":"Configuration Optimization","text":""},{"location":"advanced-topics/performance/#1-tuning-parameters","title":"1. Tuning Parameters","text":"<pre><code>class SimulationConfig:\n    def __init__(self):\n        self.update_interval = 0.1  # seconds\n        self.max_characters = 1000\n        self.memory_limit = 1000000  # bytes\n        self.cache_size = 10000\n        self.batch_size = 100\n</code></pre>"},{"location":"advanced-topics/performance/#2-dynamic-adjustment","title":"2. Dynamic Adjustment","text":"<pre><code>class DynamicOptimizer:\n    def __init__(self, simulation):\n        self.simulation = simulation\n\n    def adjust_parameters(self):\n        # Monitor system resources\n        cpu_usage = self.get_cpu_usage()\n        memory_usage = self.get_memory_usage()\n\n        # Adjust parameters based on usage\n        if cpu_usage &gt; 80:\n            self.reduce_update_frequency()\n        if memory_usage &gt; 80:\n            self.clear_caches()\n</code></pre>"},{"location":"advanced-topics/performance/#best-practices","title":"Best Practices","text":"<ol> <li>Profile First</li> <li>Identify bottlenecks</li> <li>Measure impact of changes</li> <li> <p>Set performance baselines</p> </li> <li> <p>Optimize Incrementally</p> </li> <li>Make one change at a time</li> <li>Measure impact of each change</li> <li> <p>Document improvements</p> </li> <li> <p>Balance Resources</p> </li> <li>CPU vs Memory usage</li> <li>Network vs Local processing</li> <li> <p>Storage vs Computation</p> </li> <li> <p>Cache Strategically</p> </li> <li>Identify frequently accessed data</li> <li>Set appropriate cache sizes</li> <li> <p>Implement cache invalidation</p> </li> <li> <p>Monitor Continuously</p> </li> <li>Track performance metrics</li> <li>Set up alerts</li> <li>Regular optimization reviews </li> </ol>"},{"location":"advanced-topics/prompt-engineering/","title":"Prompt Engineering","text":"<p>This guide covers advanced techniques for crafting effective prompts in DegentCivil to achieve more realistic and engaging character behaviors.</p>"},{"location":"advanced-topics/prompt-engineering/#core-principles","title":"Core Principles","text":"<ol> <li>Clarity: Write clear, unambiguous prompts</li> <li>Context: Provide relevant background information</li> <li>Consistency: Maintain consistent character personalities</li> <li>Constraints: Set appropriate behavioral boundaries</li> <li>Creativity: Allow room for dynamic responses</li> </ol>"},{"location":"advanced-topics/prompt-engineering/#prompt-structure","title":"Prompt Structure","text":""},{"location":"advanced-topics/prompt-engineering/#basic-template","title":"Basic Template","text":"<pre><code>Character Context:\n  - Name: {character_name}\n  - Role: {character_role}\n  - Personality: {personality_traits}\n  - Current State: {emotional_state}\n\nSituation Context:\n  - Location: {current_location}\n  - Time: {current_time}\n  - Present Characters: {other_characters}\n  - Recent Events: {recent_memory}\n\nTask:\n  - Objective: {specific_task}\n  - Constraints: {behavioral_limits}\n  - Expected Output: {response_format}\n</code></pre>"},{"location":"advanced-topics/prompt-engineering/#advanced-techniques","title":"Advanced Techniques","text":""},{"location":"advanced-topics/prompt-engineering/#1-memory-integration","title":"1. Memory Integration","text":"<p>Include relevant memory snippets:</p> <pre><code>Recent Memories:\n  - Personal: {character_experiences}\n  - Social: {interactions_with_others}\n  - Environmental: {location_observations}\n</code></pre>"},{"location":"advanced-topics/prompt-engineering/#2-emotional-context","title":"2. Emotional Context","text":"<p>Define emotional states and triggers:</p> <pre><code>Emotional State:\n  - Current Mood: {mood}\n  - Stress Level: {stress}\n  - Relationship Status: {relationships}\n</code></pre>"},{"location":"advanced-topics/prompt-engineering/#3-decision-making","title":"3. Decision Making","text":"<p>Guide character decision processes:</p> <pre><code>Decision Framework:\n  - Options: {available_choices}\n  - Priorities: {character_values}\n  - Consequences: {potential_outcomes}\n</code></pre>"},{"location":"advanced-topics/prompt-engineering/#best-practices","title":"Best Practices","text":""},{"location":"advanced-topics/prompt-engineering/#1-character-consistency","title":"1. Character Consistency","text":"<ul> <li>Maintain consistent personality traits</li> <li>Reference past decisions and experiences</li> <li>Use character-specific vocabulary</li> <li>Consider character development arc</li> </ul>"},{"location":"advanced-topics/prompt-engineering/#2-environmental-awareness","title":"2. Environmental Awareness","text":"<ul> <li>Include relevant location details</li> <li>Consider time of day effects</li> <li>Account for weather conditions</li> <li>Reference nearby objects/items</li> </ul>"},{"location":"advanced-topics/prompt-engineering/#3-social-dynamics","title":"3. Social Dynamics","text":"<ul> <li>Define relationship contexts</li> <li>Include social status considerations</li> <li>Account for group dynamics</li> <li>Reference social norms</li> </ul>"},{"location":"advanced-topics/prompt-engineering/#common-patterns","title":"Common Patterns","text":""},{"location":"advanced-topics/prompt-engineering/#1-dialogue-generation","title":"1. Dialogue Generation","text":"<pre><code>Dialogue Context:\n  Speaker: {character_name}\n  Listener: {target_character}\n  Relationship: {relationship_type}\n  Topic: {conversation_subject}\n  Tone: {emotional_tone}\n</code></pre>"},{"location":"advanced-topics/prompt-engineering/#2-decision-making","title":"2. Decision Making","text":"<pre><code>Decision Context:\n  Situation: {current_problem}\n  Options: {available_choices}\n  Constraints: {limitations}\n  Values: {character_priorities}\n</code></pre>"},{"location":"advanced-topics/prompt-engineering/#3-emotional-responses","title":"3. Emotional Responses","text":"<pre><code>Emotion Trigger:\n  Event: {triggering_event}\n  Impact: {personal_significance}\n  History: {related_experiences}\n  Response Range: {acceptable_reactions}\n</code></pre>"},{"location":"advanced-topics/prompt-engineering/#optimization-techniques","title":"Optimization Techniques","text":""},{"location":"advanced-topics/prompt-engineering/#1-token-efficiency","title":"1. Token Efficiency","text":"<ul> <li>Use concise language</li> <li>Remove redundant information</li> <li>Prioritize crucial context</li> <li>Structure information hierarchically</li> </ul>"},{"location":"advanced-topics/prompt-engineering/#2-response-shaping","title":"2. Response Shaping","text":"<ul> <li>Set clear output formats</li> <li>Define response boundaries</li> <li>Include validation criteria</li> <li>Specify detail level</li> </ul>"},{"location":"advanced-topics/prompt-engineering/#3-error-prevention","title":"3. Error Prevention","text":"<ul> <li>Include sanity checks</li> <li>Define fallback behaviors</li> <li>Set reasonable limits</li> <li>Validate outputs</li> </ul>"},{"location":"advanced-topics/prompt-engineering/#testing-and-iteration","title":"Testing and Iteration","text":""},{"location":"advanced-topics/prompt-engineering/#1-prompt-testing","title":"1. Prompt Testing","text":"<pre><code>def test_prompt_effectiveness():\n    test_cases = [\n        {\"input\": base_prompt, \"expected\": \"realistic_response\"},\n        {\"input\": modified_prompt, \"expected\": \"improved_response\"}\n    ]\n\n    for case in test_cases:\n        response = generate_response(case[\"input\"])\n        validate_response(response, case[\"expected\"])\n</code></pre>"},{"location":"advanced-topics/prompt-engineering/#2-quality-metrics","title":"2. Quality Metrics","text":"<ul> <li>Response relevance</li> <li>Character consistency</li> <li>Behavioral realism</li> <li>Output formatting</li> <li>Performance impact</li> </ul>"},{"location":"advanced-topics/prompt-engineering/#troubleshooting","title":"Troubleshooting","text":""},{"location":"advanced-topics/prompt-engineering/#common-issues","title":"Common Issues","text":"<ol> <li>Inconsistent Responses</li> <li>Review character context</li> <li>Check for conflicting instructions</li> <li> <p>Validate emotional states</p> </li> <li> <p>Poor Performance</p> </li> <li>Optimize prompt length</li> <li>Remove unnecessary context</li> <li> <p>Streamline instructions</p> </li> <li> <p>Unrealistic Behavior</p> </li> <li>Enhance situational context</li> <li>Adjust behavioral constraints</li> <li>Review social dynamics</li> </ol>"},{"location":"advanced-topics/prompt-engineering/#advanced-examples","title":"Advanced Examples","text":""},{"location":"advanced-topics/prompt-engineering/#complex-social-interaction","title":"Complex Social Interaction","text":"<pre><code>Interaction Context:\n  Primary Character:\n    Name: John Smith\n    Role: Merchant\n    Goals: Make sales, maintain relationships\n    Current State: Busy with customers\n\n  Social Environment:\n    Location: Market Square\n    Time: Peak business hours\n    Present Characters:\n      - Regular customers\n      - Competing merchants\n      - Town guards\n\n  Behavioral Guidelines:\n    - Maintain professional demeanor\n    - Balance multiple customer interactions\n    - Respond to competition appropriately\n    - Follow market regulations\n</code></pre>"},{"location":"advanced-topics/prompt-engineering/#emergency-response","title":"Emergency Response","text":"<pre><code>Emergency Context:\n  Situation: Building fire\n  Character Role: Town Guard\n  Primary Objectives:\n    - Ensure civilian safety\n    - Coordinate with other guards\n    - Maintain order\n\n  Response Parameters:\n    - Urgency level: High\n    - Authority level: Official\n    - Communication style: Clear, commanding\n    - Action constraints: Safety protocols\n</code></pre>"},{"location":"advanced-topics/prompt-engineering/#performance-optimization","title":"Performance Optimization","text":"<ol> <li>Caching Strategies</li> <li>Cache common prompt templates</li> <li>Store frequently used character contexts</li> <li> <p>Reuse environmental descriptions</p> </li> <li> <p>Batch Processing</p> </li> <li>Group similar prompt types</li> <li>Process related character interactions</li> <li> <p>Combine environmental updates</p> </li> <li> <p>Resource Management</p> </li> <li>Monitor token usage</li> <li>Track response times</li> <li>Optimize context length </li> </ol>"},{"location":"advanced-topics/websocket/","title":"WebSocket Integration","text":"<p>This guide covers the implementation of WebSocket functionality in DegentCivil for real-time communication and updates.</p>"},{"location":"advanced-topics/websocket/#overview","title":"Overview","text":"<p>WebSocket integration enables:</p> <ul> <li>Real-time simulation updates</li> <li>Character state broadcasting</li> <li>Event notifications</li> <li>Interactive debugging</li> <li>Live monitoring</li> </ul>"},{"location":"advanced-topics/websocket/#basic-setup","title":"Basic Setup","text":""},{"location":"advanced-topics/websocket/#server-implementation","title":"Server Implementation","text":"<pre><code>import asyncio\nimport websockets\nimport json\n\nclass SimulationWebSocket:\n    def __init__(self, host='localhost', port=8765):\n        self.host = host\n        self.port = port\n        self.clients = set()\n\n    async def start_server(self):\n        server = await websockets.serve(\n            self.handle_connection,\n            self.host,\n            self.port\n        )\n        print(f\"WebSocket server running on ws://{self.host}:{self.port}\")\n        await server.wait_closed()\n\n    async def handle_connection(self, websocket, path):\n        self.clients.add(websocket)\n        try:\n            await self.handle_messages(websocket)\n        finally:\n            self.clients.remove(websocket)\n</code></pre>"},{"location":"advanced-topics/websocket/#client-implementation","title":"Client Implementation","text":"<pre><code>class SimulationClient:\n    def __init__(self, uri='ws://localhost:8765'):\n        self.uri = uri\n        self.websocket = None\n\n    async def connect(self):\n        self.websocket = await websockets.connect(self.uri)\n        print(f\"Connected to {self.uri}\")\n\n    async def receive_updates(self):\n        while True:\n            try:\n                message = await self.websocket.recv()\n                await self.handle_message(json.loads(message))\n            except websockets.exceptions.ConnectionClosed:\n                break\n</code></pre>"},{"location":"advanced-topics/websocket/#message-protocol","title":"Message Protocol","text":""},{"location":"advanced-topics/websocket/#message-structure","title":"Message Structure","text":"<pre><code>class WebSocketMessage:\n    def __init__(self, type, data):\n        self.type = type\n        self.data = data\n\n    def to_json(self):\n        return json.dumps({\n            'type': self.type,\n            'data': self.data,\n            'timestamp': time.time()\n        })\n\n    @classmethod\n    def from_json(cls, json_str):\n        data = json.loads(json_str)\n        return cls(data['type'], data['data'])\n</code></pre>"},{"location":"advanced-topics/websocket/#message-types","title":"Message Types","text":"<pre><code>class MessageTypes:\n    CHARACTER_UPDATE = 'character_update'\n    STATE_CHANGE = 'state_change'\n    EVENT_NOTIFICATION = 'event_notification'\n    ERROR = 'error'\n    HEARTBEAT = 'heartbeat'\n</code></pre>"},{"location":"advanced-topics/websocket/#real-time-updates","title":"Real-time Updates","text":""},{"location":"advanced-topics/websocket/#character-state-broadcasting","title":"Character State Broadcasting","text":"<pre><code>class CharacterStatePublisher:\n    def __init__(self, websocket_server):\n        self.server = websocket_server\n\n    async def publish_state_change(self, character):\n        message = WebSocketMessage(\n            MessageTypes.STATE_CHANGE,\n            {\n                'character_id': character.id,\n                'new_state': character.state_name,\n                'location': character.location.name,\n                'timestamp': time.time()\n            }\n        )\n        await self.broadcast_message(message)\n\n    async def broadcast_message(self, message):\n        if not self.server.clients:\n            return\n\n        await asyncio.gather(\n            *[client.send(message.to_json())\n              for client in self.server.clients]\n        )\n</code></pre>"},{"location":"advanced-topics/websocket/#event-notifications","title":"Event Notifications","text":"<pre><code>class EventNotifier:\n    def __init__(self, websocket_server):\n        self.server = websocket_server\n\n    async def notify_event(self, event_type, event_data):\n        message = WebSocketMessage(\n            MessageTypes.EVENT_NOTIFICATION,\n            {\n                'event_type': event_type,\n                'data': event_data,\n                'timestamp': time.time()\n            }\n        )\n        await self.server.broadcast_message(message)\n</code></pre>"},{"location":"advanced-topics/websocket/#connection-management","title":"Connection Management","text":""},{"location":"advanced-topics/websocket/#connection-pool","title":"Connection Pool","text":"<pre><code>class ConnectionPool:\n    def __init__(self):\n        self.connections = {}\n        self.max_connections = 1000\n\n    async def add_connection(self, client_id, websocket):\n        if len(self.connections) &gt;= self.max_connections:\n            raise Exception(\"Maximum connections reached\")\n\n        self.connections[client_id] = websocket\n\n    async def remove_connection(self, client_id):\n        if client_id in self.connections:\n            del self.connections[client_id]\n</code></pre>"},{"location":"advanced-topics/websocket/#authentication","title":"Authentication","text":"<pre><code>class WebSocketAuth:\n    def __init__(self):\n        self.tokens = {}\n\n    async def authenticate(self, websocket, token):\n        if not self.is_valid_token(token):\n            await websocket.close(1008, \"Invalid token\")\n            return False\n        return True\n\n    def is_valid_token(self, token):\n        return token in self.tokens\n</code></pre>"},{"location":"advanced-topics/websocket/#error-handling","title":"Error Handling","text":""},{"location":"advanced-topics/websocket/#error-types","title":"Error Types","text":"<pre><code>class WebSocketError:\n    INVALID_MESSAGE = 1001\n    AUTH_FAILED = 1002\n    RATE_LIMIT = 1003\n    SERVER_ERROR = 1004\n\n    @staticmethod\n    def create_error_message(code, message):\n        return WebSocketMessage(\n            MessageTypes.ERROR,\n            {\n                'code': code,\n                'message': message\n            }\n        )\n</code></pre>"},{"location":"advanced-topics/websocket/#error-handling-middleware","title":"Error Handling Middleware","text":"<pre><code>class ErrorHandler:\n    async def handle_error(self, websocket, error):\n        error_message = WebSocketError.create_error_message(\n            error.code,\n            str(error)\n        )\n        await websocket.send(error_message.to_json())\n</code></pre>"},{"location":"advanced-topics/websocket/#performance-optimization","title":"Performance Optimization","text":""},{"location":"advanced-topics/websocket/#message-batching","title":"Message Batching","text":"<pre><code>class MessageBatcher:\n    def __init__(self, max_size=100, max_wait=1.0):\n        self.max_size = max_size\n        self.max_wait = max_wait\n        self.batch = []\n\n    async def add_message(self, message):\n        self.batch.append(message)\n        if len(self.batch) &gt;= self.max_size:\n            await self.flush()\n\n    async def flush(self):\n        if not self.batch:\n            return\n\n        batch_message = WebSocketMessage(\n            'batch',\n            self.batch\n        )\n        self.batch = []\n        return batch_message\n</code></pre>"},{"location":"advanced-topics/websocket/#rate-limiting","title":"Rate Limiting","text":"<pre><code>class RateLimiter:\n    def __init__(self, max_messages=100, window_seconds=60):\n        self.max_messages = max_messages\n        self.window_seconds = window_seconds\n        self.message_counts = {}\n\n    async def check_rate_limit(self, client_id):\n        now = time.time()\n        if client_id not in self.message_counts:\n            self.message_counts[client_id] = []\n\n        # Clean old messages\n        self.message_counts[client_id] = [\n            timestamp for timestamp in self.message_counts[client_id]\n            if now - timestamp &lt;= self.window_seconds\n        ]\n\n        if len(self.message_counts[client_id]) &gt;= self.max_messages:\n            raise WebSocketError(\n                WebSocketError.RATE_LIMIT,\n                \"Rate limit exceeded\"\n            )\n\n        self.message_counts[client_id].append(now)\n</code></pre>"},{"location":"advanced-topics/websocket/#monitoring-and-debugging","title":"Monitoring and Debugging","text":""},{"location":"advanced-topics/websocket/#connection-monitor","title":"Connection Monitor","text":"<pre><code>class ConnectionMonitor:\n    def __init__(self):\n        self.metrics = {\n            'total_connections': 0,\n            'active_connections': 0,\n            'messages_sent': 0,\n            'messages_received': 0,\n            'errors': 0\n        }\n\n    def update_metrics(self, metric_name, value=1):\n        self.metrics[metric_name] += value\n\n    def get_metrics(self):\n        return self.metrics\n</code></pre>"},{"location":"advanced-topics/websocket/#debug-mode","title":"Debug Mode","text":"<pre><code>class WebSocketDebugger:\n    def __init__(self, enabled=False):\n        self.enabled = enabled\n        self.log_queue = asyncio.Queue()\n\n    async def log_message(self, direction, message):\n        if not self.enabled:\n            return\n\n        await self.log_queue.put({\n            'timestamp': time.time(),\n            'direction': direction,\n            'message': message\n        })\n\n    async def process_logs(self):\n        while True:\n            log = await self.log_queue.get()\n            print(f\"[{log['timestamp']}] {log['direction']}: {log['message']}\")\n</code></pre>"},{"location":"advanced-topics/websocket/#best-practices","title":"Best Practices","text":"<ol> <li>Connection Management</li> <li>Implement heartbeat mechanism</li> <li>Handle reconnection gracefully</li> <li>Clean up resources properly</li> <li> <p>Monitor connection health</p> </li> <li> <p>Security</p> </li> <li>Use secure WebSocket (wss://)</li> <li>Implement authentication</li> <li>Validate all messages</li> <li> <p>Rate limit connections</p> </li> <li> <p>Performance</p> </li> <li>Batch messages when possible</li> <li>Implement compression</li> <li>Monitor memory usage</li> <li> <p>Handle backpressure</p> </li> <li> <p>Error Handling</p> </li> <li>Graceful error recovery</li> <li>Meaningful error messages</li> <li>Proper logging</li> <li> <p>Circuit breakers</p> </li> <li> <p>Testing</p> </li> <li>Unit test message handlers</li> <li>Load test connections</li> <li>Test error scenarios</li> <li>Verify message protocols </li> </ol>"},{"location":"api-reference/character/","title":"Character Model","text":"<p>The Character Model represents individual agents within the simulation, encapsulating their attributes, behaviors, and state management.</p>"},{"location":"api-reference/character/#overview","title":"Overview","text":"<p>Characters are the primary actors in the simulation, each with their own: - Personality traits - Memory and knowledge - Current state and behaviors - Relationships with other characters - Goals and motivations</p>"},{"location":"api-reference/character/#properties","title":"Properties","text":"<ul> <li><code>id</code>: Unique identifier for the character</li> <li><code>name</code>: Character's full name</li> <li><code>traits</code>: Dictionary of personality traits</li> <li><code>state</code>: Current state of the character</li> <li><code>memory</code>: Reference to the character's memory system</li> <li><code>relationships</code>: Dictionary of relationships with other characters</li> </ul>"},{"location":"api-reference/character/#methods","title":"Methods","text":""},{"location":"api-reference/character/#state-management","title":"State Management","text":"<pre><code>def update_state(self, new_state: str) -&gt; None\n</code></pre> <p>Updates the character's current state and triggers relevant state transition handlers.</p>"},{"location":"api-reference/character/#memory-management","title":"Memory Management","text":"<pre><code>def add_memory(self, memory_content: str, importance: float = 0.5) -&gt; None\n</code></pre> <p>Adds a new memory to the character's memory system with specified importance.</p>"},{"location":"api-reference/character/#usage-example","title":"Usage Example","text":"<p>```python character = Character(     name=\"John Smith\",     traits={         \"openness\": 0.7,         \"conscientiousness\": 0.8,         \"extraversion\": 0.6,         \"agreeableness\": 0.75,         \"neuroticism\": 0.4     } )</p> <p>character.update_state(\"working\") character.add_memory(\"Met Alice at the coffee shop\") </p>"},{"location":"api-reference/llm/callers/","title":"LLM Callers API Reference","text":"<p>\ud83d\udea7 Coming Soon! \ud83d\udea7</p> <p>This documentation is currently under development. We're working hard to provide comprehensive documentation for the LLM Callers API.</p>"},{"location":"api-reference/llm/callers/#what-to-expect","title":"What to Expect","text":"<ul> <li>Supported LLM providers</li> <li>API integration details</li> <li>Rate limiting and caching</li> <li>Error handling</li> <li>Response processing</li> <li>Cost optimization</li> </ul> <p>Check back soon for updates! </p>"},{"location":"api-reference/models/base-agent/","title":"Base Agent Model API Reference","text":"<p>The Base Agent Model provides core functionality for all agents in the simulation, implementing message handling, LLM integration, and basic agent behaviors.</p>"},{"location":"api-reference/models/base-agent/#overview","title":"Overview","text":"<p>The Base Agent system consists of several key components: - Message handling and routing - LLM client management - Function calling system - Game server communication - State management</p>"},{"location":"api-reference/models/base-agent/#simsagent-class","title":"SimsAgent Class","text":"<p>The SimsAgent class extends AssistantAgent to provide base functionality for all agents in the simulation.</p>"},{"location":"api-reference/models/base-agent/#properties","title":"Properties","text":"<ul> <li><code>name</code>: Agent name</li> <li><code>guid</code>: Unique identifier</li> <li><code>clients</code>: Dictionary of LLM clients for different models</li> <li><code>client</code>: Default OpenAI wrapper client</li> <li><code>callable_tools</code>: List of registered callable functions</li> <li><code>state</code>: Current agent state</li> </ul>"},{"location":"api-reference/models/base-agent/#methods","title":"Methods","text":""},{"location":"api-reference/models/base-agent/#message-handling","title":"Message Handling","text":"<pre><code>def push_reply_to_game_server(self, message: Union[Dict, str], recipient: Agent, silent: bool) -&gt; Union[Dict, str]\n</code></pre> <p>Pushes agent messages to the game server for processing.</p> <pre><code>def _message_to_dict(self, message: Union[Dict, str]) -&gt; Dict\n</code></pre> <p>Converts various message formats to a standardized dictionary format.</p>"},{"location":"api-reference/models/base-agent/#llm-integration","title":"LLM Integration","text":"<pre><code>def generate_oai_reply(\n    self,\n    messages: Optional[List[Dict]] = None,\n    sender: Optional[Agent] = None,\n    config: Optional['OpenAIWrapper'] = None\n) -&gt; tuple[bool, Union[str, Dict, None]]\n</code></pre> <p>Generates replies using the appropriate LLM client based on current state.</p>"},{"location":"api-reference/models/base-agent/#function-management","title":"Function Management","text":"<pre><code>def register_callable_tools(self, func: Callable) -&gt; Callable\n</code></pre> <p>Registers new functions that can be called by the agent.</p> <pre><code>def func_router(\n    self, \n    messages: Union[Dict, str], \n    sender: Agent, \n    config: Optional['OpenAIWrapper'] = None\n) -&gt; tuple[bool, Any]\n</code></pre> <p>Routes function calls from messages to appropriate registered functions.</p>"},{"location":"api-reference/models/base-agent/#state-management","title":"State Management","text":"<pre><code>def update_system_message(self, system_message: str) -&gt; None\n</code></pre> <p>Updates the agent's system message.</p> <pre><code>def subsitute_reply(self, new_func: Callable) -&gt; None\n</code></pre> <p>Replaces existing reply function with a new implementation.</p>"},{"location":"api-reference/models/base-agent/#resource-management","title":"Resource Management","text":"<pre><code>def vigor_cost(self, message: Union[Dict, str], recipient: Agent, silent: bool) -&gt; None\n</code></pre> <p>Calculates and applies vigor cost for message generation.</p>"},{"location":"api-reference/models/base-agent/#usage-example","title":"Usage Example","text":"<pre><code># Create a new base agent\nagent = SimsAgent(\n    name=\"shop_keeper\",\n    system_message=\"You are a helpful shop keeper.\",\n    llm_config={\n        \"config_list\": [{\n            \"model\": \"gpt-3.5-turbo-0125\",\n            \"api_key\": \"sk-xxx\"\n        }]\n    }\n)\n\n# Register a custom function\n@agent.register_callable_tools\ndef handle_purchase(item_id: str, price: float, sender: Agent) -&gt; tuple[bool, str]:\n    # Process purchase logic\n    return True, \"Purchase successful\"\n\n# Send a message\nmessage = {\n    \"content\": \"I'd like to buy this item\",\n    \"tool_call\": \"handle_purchase\",\n    \"item_id\": \"123\",\n    \"price\": 99.99\n}\nsuccess, response = agent.func_router(message, sender=customer_agent)\n</code></pre>"},{"location":"api-reference/models/base-agent/#message-format","title":"Message Format","text":""},{"location":"api-reference/models/base-agent/#input-message-structure","title":"Input Message Structure","text":"<pre><code>{\n    \"content\": str,          # Main message content\n    \"tool_call\": str,        # Optional: function name to call\n    \"agent_guid\": int,       # Agent identifier\n    **kwargs                 # Additional arguments for tool calls\n}\n</code></pre>"},{"location":"api-reference/models/base-agent/#output-message-structure","title":"Output Message Structure","text":"<pre><code>{\n    \"content\": str,          # Response content\n    \"agent_guid\": int,       # Agent identifier\n    \"song\": str             # Optional: associated sound effect\n}\n</code></pre>"},{"location":"api-reference/models/base-agent/#integration-points","title":"Integration Points","text":""},{"location":"api-reference/models/base-agent/#game-server-communication","title":"Game Server Communication","text":"<ul> <li>Messages are formatted and sent to game server</li> <li>Responses are processed and routed to appropriate handlers</li> <li>State changes are synchronized</li> </ul>"},{"location":"api-reference/models/base-agent/#llm-integration_1","title":"LLM Integration","text":"<ul> <li>Multiple model support through client dictionary</li> <li>State-based model selection</li> <li>Configurable response formats</li> </ul>"},{"location":"api-reference/models/base-agent/#function-calling","title":"Function Calling","text":"<ul> <li>Dynamic function registration</li> <li>Argument validation</li> <li>Error handling and feedback </li> </ul>"},{"location":"api-reference/models/building/","title":"Building Model API Reference","text":"<p>The Building Model manages buildings, their properties, equipment, and job positions in the simulation. It handles building-character interactions and maintains building state.</p>"},{"location":"api-reference/models/building/#overview","title":"Overview","text":"<p>The Building system consists of several key components: - Building management with physical properties and locations - Equipment handling within buildings - Job position management - Building-character interactions - Building state persistence</p>"},{"location":"api-reference/models/building/#building-class","title":"Building Class","text":"<p>The main Building class handles building operations and state management.</p>"},{"location":"api-reference/models/building/#properties","title":"Properties","text":"<ul> <li><code>guid</code>: Unique identifier for the building</li> <li><code>name</code>: Building name</li> <li><code>position</code>: Building coordinates (xMin, yMin, xMax, yMax)</li> <li><code>money</code>: Building's financial balance</li> <li><code>description</code>: Text describing the building</li> <li><code>instruction</code>: Building operation instructions</li> <li><code>equipments</code>: Dictionary of equipment within the building</li> <li><code>job_positions</code>: Dictionary of available jobs</li> </ul>"},{"location":"api-reference/models/building/#methods","title":"Methods","text":""},{"location":"api-reference/models/building/#building-management","title":"Building Management","text":"<pre><code>def cordinate_in_building(self, x: int, y: int) -&gt; bool\n</code></pre> <p>Checks if given coordinates are within building boundaries.</p> <pre><code>def random_pos_inside(self) -&gt; tuple[int, int]\n</code></pre> <p>Returns random valid coordinates inside the building.</p>"},{"location":"api-reference/models/building/#equipment-management","title":"Equipment Management","text":"<pre><code>def add_equipments(self, equipments: dict) -&gt; dict\n</code></pre> <p>Adds new equipment to the building.</p> <pre><code>def update_equipments(self, equipments: dict) -&gt; None\n</code></pre> <p>Updates existing equipment information.</p> <pre><code>def equipment_instr(self, equip_name: str) -&gt; str\n</code></pre> <p>Returns instructions for specific equipment.</p>"},{"location":"api-reference/models/building/#job-management","title":"Job Management","text":"<pre><code>def add_jobs(self, jobs: dict) -&gt; dict\n</code></pre> <p>Adds new job positions to the building.</p> <pre><code>def update_jobs(self, jobs: dict) -&gt; None\n</code></pre> <p>Updates existing job information.</p>"},{"location":"api-reference/models/building/#buildinglist-class","title":"BuildingList Class","text":"<p>Manages collections of buildings in the simulation.</p>"},{"location":"api-reference/models/building/#methods_1","title":"Methods","text":"<pre><code>def add_building(self, building: Building) -&gt; None\n</code></pre> <p>Adds a building to the list.</p> <pre><code>def get_building_by_id(self, building_id: str) -&gt; Optional[Building]\n</code></pre> <p>Retrieves building by ID.</p> <pre><code>def get_building_by_name(self, building_name: str) -&gt; Optional[Building]\n</code></pre> <p>Retrieves building by name.</p> <pre><code>def get_building_by_pos(self, x: int, y: int) -&gt; Optional[Building]\n</code></pre> <p>Retrieves building at specified coordinates.</p>"},{"location":"api-reference/models/building/#inbuildingequip-class","title":"InBuildingEquip Class","text":"<p>Manages equipment within buildings.</p>"},{"location":"api-reference/models/building/#properties_1","title":"Properties","text":"<ul> <li><code>name</code>: Equipment name</li> <li><code>instruction</code>: Usage instructions</li> <li><code>status</code>: Current equipment status</li> <li><code>interactable</code>: Whether equipment can be interacted with</li> <li><code>functions</code>: Available interaction functions</li> </ul>"},{"location":"api-reference/models/building/#methods_2","title":"Methods","text":"<pre><code>def random_choose(self) -&gt; int\n</code></pre> <p>Randomly selects an instance from similar equipment.</p> <pre><code>def modify_internal_properties(self, prop: dict) -&gt; None\n</code></pre> <p>Updates equipment properties.</p>"},{"location":"api-reference/models/building/#job-class","title":"Job Class","text":"<p>Manages job positions within buildings.</p>"},{"location":"api-reference/models/building/#properties_2","title":"Properties","text":"<ul> <li><code>name</code>: Job title</li> <li><code>description</code>: Job description</li> <li><code>salary</code>: Job salary</li> <li><code>num_positions</code>: Number of available positions</li> <li><code>applicants</code>: List of current applicants</li> </ul>"},{"location":"api-reference/models/building/#methods_3","title":"Methods","text":"<pre><code>def add_applicant(self, applicant) -&gt; None\n</code></pre> <p>Adds new job applicant.</p> <pre><code>def remove_applicant(self, applicant) -&gt; None\n</code></pre> <p>Removes job applicant.</p>"},{"location":"api-reference/models/building/#usage-example","title":"Usage Example","text":"<pre><code># Create a new building\nbuilding = Building(\n    id=1,\n    name=\"Coffee Shop\",\n    llm_cfg={...},\n    xMin=0, yMin=0, xMax=10, yMax=10,\n    description=\"A cozy coffee shop in town\",\n    instruction=\"Serve coffee and snacks to customers\",\n    equipments={\n        \"coffee_machine\": {\n            \"name\": \"Coffee Machine\",\n            \"instruction\": \"Press button to brew coffee\",\n            \"status\": \"operational\"\n        }\n    },\n    jobs={\n        \"barista\": {\n            \"description\": \"Make and serve coffee\",\n            \"salary\": 15.0,\n            \"num_positions\": 2\n        }\n    }\n)\n\n# Add equipment\nbuilding.add_equipments({\n    \"cash_register\": {\n        \"name\": \"Cash Register\",\n        \"instruction\": \"Process payments\",\n        \"status\": \"operational\"\n    }\n})\n\n# Check if position is inside building\nis_inside = building.cordinate_in_building(5, 5)\n\n# Get available jobs\navailable_jobs = building.available_jobs\n</code></pre>"},{"location":"api-reference/models/character/","title":"Character Model API Reference","text":"<p>The Character Model manages individual characters in the simulation, including their properties, memories, relationships, and interactions with the environment.</p>"},{"location":"api-reference/models/character/#overview","title":"Overview","text":"<p>The Character system consists of several key components: - Character state and attribute management - Memory system integration - Relationship handling - Inventory and resource management - Character behavior and decision making</p>"},{"location":"api-reference/models/character/#character-class","title":"Character Class","text":"<p>The main Character class handles character operations and state management.</p>"},{"location":"api-reference/models/character/#properties","title":"Properties","text":"<ul> <li><code>guid</code>: Unique identifier for the character</li> <li><code>name</code>: Character name</li> <li><code>money</code>: Character's financial balance</li> <li><code>location</code>: Current position (x, y coordinates)</li> <li><code>inventory</code>: Dictionary of owned items</li> <li><code>relationships</code>: Dictionary of relationships with other characters</li> <li><code>memory</code>: Memory system instance for storing experiences</li> <li><code>state</code>: Current character state and status</li> </ul>"},{"location":"api-reference/models/character/#memory-system","title":"Memory System","text":""},{"location":"api-reference/models/character/#working-memory","title":"Working Memory","text":"<pre><code>def store_memory(self, memory: Dict[str, Any]) -&gt; None\n</code></pre> <p>Stores recent experiences and current context in working memory.</p> <pre><code>def retrieve_memory(self, query: str) -&gt; Dict[str, Any]\n</code></pre> <p>Retrieves relevant memories based on query.</p>"},{"location":"api-reference/models/character/#long-term-memory","title":"Long-term Memory","text":"<pre><code>def store_entity_memory(self, memory: Dict[str, Any]) -&gt; None\n</code></pre> <p>Stores memories about other characters and entities.</p> <pre><code>def store_location_memory(self, memory: Dict[str, Any]) -&gt; None\n</code></pre> <p>Stores memories about locations and buildings.</p> <pre><code>def store_transaction_memory(self, memory: Dict[str, Any]) -&gt; None\n</code></pre> <p>Stores memories about economic transactions.</p>"},{"location":"api-reference/models/character/#relationship-management","title":"Relationship Management","text":"<pre><code>def update_relationship(self, character_id: str, impression: float) -&gt; None\n</code></pre> <p>Updates relationship status with another character.</p> <pre><code>def get_relationship(self, character_id: str) -&gt; float\n</code></pre> <p>Retrieves relationship status with specific character.</p>"},{"location":"api-reference/models/character/#inventory-management","title":"Inventory Management","text":"<pre><code>def add_item(self, item: Dict[str, Any]) -&gt; None\n</code></pre> <p>Adds item to character inventory.</p> <pre><code>def remove_item(self, item_id: str) -&gt; bool\n</code></pre> <p>Removes item from inventory.</p> <pre><code>def check_item(self, item_id: str) -&gt; bool\n</code></pre> <p>Checks if character has specific item.</p>"},{"location":"api-reference/models/character/#state-management","title":"State Management","text":"<pre><code>def update_state(self, new_state: Dict[str, Any]) -&gt; None\n</code></pre> <p>Updates character's current state.</p> <pre><code>def get_state(self) -&gt; Dict[str, Any]\n</code></pre> <p>Retrieves character's current state.</p>"},{"location":"api-reference/models/character/#movement-and-location","title":"Movement and Location","text":"<pre><code>def move_to(self, x: int, y: int) -&gt; bool\n</code></pre> <p>Moves character to new location.</p> <pre><code>def get_location(self) -&gt; tuple[int, int]\n</code></pre> <p>Gets character's current location.</p>"},{"location":"api-reference/models/character/#usage-example","title":"Usage Example","text":"<pre><code># Create a new character\ncharacter = Character(\n    id=1,\n    name=\"John Smith\",\n    money=1000.0,\n    location=(5, 5),\n    description=\"A friendly local shopkeeper\",\n    inventory={\n        \"keys\": {\n            \"quantity\": 1,\n            \"description\": \"Shop keys\"\n        }\n    }\n)\n\n# Store a memory\ncharacter.store_memory({\n    \"type\": \"interaction\",\n    \"entity\": \"Coffee Shop\",\n    \"action\": \"purchased coffee\",\n    \"timestamp\": \"2024-03-15T10:30:00\"\n})\n\n# Update relationship\ncharacter.update_relationship(\n    character_id=\"character_2\",\n    impression=0.8\n)\n\n# Move character\ncharacter.move_to(10, 15)\n\n# Add item to inventory\ncharacter.add_item({\n    \"id\": \"coffee_beans\",\n    \"name\": \"Coffee Beans\",\n    \"quantity\": 5\n})\n</code></pre>"},{"location":"api-reference/models/character/#memory-types","title":"Memory Types","text":""},{"location":"api-reference/models/character/#entity-memory","title":"Entity Memory","text":"<p>Stores information about interactions with other characters and entities: - People memories - Relationship status - Interaction history - Impressions and opinions</p>"},{"location":"api-reference/models/character/#location-memory","title":"Location Memory","text":"<p>Stores information about places and buildings: - Building descriptions - Past experiences - Important locations - Associated activities</p>"},{"location":"api-reference/models/character/#transaction-memory","title":"Transaction Memory","text":"<p>Stores information about economic activities: - Purchase history - Sale records - Price information - Transaction outcomes</p>"},{"location":"api-reference/models/character/#state-management_1","title":"State Management","text":"<p>Characters maintain various states that affect their behavior and interactions: - Emotional state - Physical condition - Current activity - Social status - Economic status</p> <p>The state system allows for dynamic character behavior based on their current condition and circumstances. </p>"},{"location":"api-reference/models/content-generator/","title":"Content Generator API Reference","text":"<p>The Content Generator module provides functionality for generating and managing drawings and artwork in the simulation.</p>"},{"location":"api-reference/models/content-generator/#drawing-class","title":"Drawing Class","text":"<p>Represents a single drawing or artwork piece in the simulation.</p>"},{"location":"api-reference/models/content-generator/#properties","title":"Properties","text":"<ul> <li><code>id</code>: Unique identifier for the drawing</li> <li><code>owner</code>: Reference to the Character who owns the drawing</li> <li><code>image_url</code>: URL to the drawing's image</li> <li><code>description</code>: Text description of the drawing</li> <li><code>price</code>: Current price of the drawing</li> <li><code>timestamp</code>: Creation timestamp</li> </ul>"},{"location":"api-reference/models/content-generator/#methods","title":"Methods","text":"<pre><code>@classmethod\nasync def a_draw(cls, prompt: str, owner: Character, api_key: str = None) -&gt; Drawing\n</code></pre> <p>Creates a new drawing.</p> <pre><code>def set_price(self, price: int) -&gt; None\n</code></pre> <p>Sets the drawing's price.</p>"},{"location":"api-reference/models/content-generator/#drawinglist-class","title":"DrawingList Class","text":"<p>Manages a collection of drawings for a character.</p>"},{"location":"api-reference/models/content-generator/#properties_1","title":"Properties","text":"<ul> <li><code>cache</code>: Local storage for drawings</li> <li><code>drawings</code>: List of Drawing objects</li> <li><code>owner</code>: Reference to the owning Character</li> </ul>"},{"location":"api-reference/models/content-generator/#methods_1","title":"Methods","text":"<pre><code>def add(self, drawing: Drawing) -&gt; None\n</code></pre> <p>Adds a drawing to the collection and updates storage.</p> <pre><code>def get(self, id: str) -&gt; Optional[Drawing]\n</code></pre> <p>Retrieves a drawing by ID.</p>"},{"location":"api-reference/models/content-generator/#integration-points","title":"Integration Points","text":""},{"location":"api-reference/models/content-generator/#vector-storage","title":"Vector Storage","text":"<ul> <li>Milvus integration for artwork embeddings</li> <li>Similarity search capabilities</li> <li>Market value adjustments</li> </ul>"},{"location":"api-reference/models/content-generator/#database-storage","title":"Database Storage","text":"<ul> <li>Artwork metadata storage</li> <li>Price history tracking</li> <li>Ownership records</li> </ul>"},{"location":"api-reference/models/content-generator/#image-generation","title":"Image Generation","text":"<ul> <li>DALLE-3 integration</li> <li>Prompt processing</li> <li>Image caching </li> </ul>"},{"location":"api-reference/models/emotion/","title":"Emotion API Reference","text":"<p>The Emotion module manages character emotions and emotional state transitions in the simulation.</p>"},{"location":"api-reference/models/emotion/#overview","title":"Overview","text":"<p>The Emotion system handles: - Multiple emotion categories - Emotion intensity tracking - Emotional state updates - Event-based emotion changes - Emotional memory</p>"},{"location":"api-reference/models/emotion/#emotion-class","title":"Emotion Class","text":""},{"location":"api-reference/models/emotion/#constants","title":"Constants","text":"<pre><code>emotional_options = [\n    \"joy\", \"trust\", \"fear\", \"surprise\", \n    \"sadness\", \"disgust\", \"anger\", \"anticipation\"\n]\n\npositive_emotions = [\"joy\", \"trust\", \"anticipation\", \"surprise\"]\nnegative_emotions = [\"fear\", \"surprise\", \"sadness\", \"disgust\", \"anger\"]\n</code></pre>"},{"location":"api-reference/models/emotion/#properties","title":"Properties","text":"<ul> <li><code>emotion</code>: Dictionary mapping emotion types to intensity values (0-10)</li> <li><code>update_alpha</code>: Weight for new emotion updates (default: 0.7)</li> <li><code>passive_decay_alpha</code>: Rate of passive emotion decay (default: 0.01)</li> <li><code>impressive_event</code>: Dictionary storing significant emotional events</li> </ul>"},{"location":"api-reference/models/emotion/#methods","title":"Methods","text":""},{"location":"api-reference/models/emotion/#emotion-management","title":"Emotion Management","text":"<pre><code>def update(self, emotions: list[dict] = None) -&gt; None\n</code></pre> <p>Updates emotional states based on new events or passive decay.</p> <p>Example input:</p> <pre><code>emotions = [\n    {\n        \"emotion\": \"joy\",\n        \"change\": 4,\n        \"explanation\": \"I feel much happy because I got a gift from Jay.\"\n    },\n    {\n        \"emotion\": \"trust\",\n        \"change\": 2,\n        \"explanation\": \"I trust Jay, he is a kind person.\"\n    }\n]\n</code></pre> <pre><code>def update_single_emotion(self, emotion: str, intensity_change: float, event: str = None) -&gt; None\n</code></pre> <p>Updates a single emotion's intensity and records the triggering event.</p>"},{"location":"api-reference/models/emotion/#state-queries","title":"State Queries","text":"<pre><code>@property\ndef impression(self) -&gt; Dict[str, float]\n</code></pre> <p>Returns current emotional state values.</p> <pre><code>@property\ndef extreme_emotion(self) -&gt; dict\n</code></pre> <p>Returns the most intense emotion and its value.</p> <pre><code>@property\ndef most_impressive_event(self) -&gt; tuple[str, str]\n</code></pre> <p>Returns the most significant emotional event and its associated emotion.</p>"},{"location":"api-reference/models/emotion/#initialization","title":"Initialization","text":"<pre><code>def random_init_emotions(self) -&gt; None\n</code></pre> <p>Initializes emotions with balanced random values: - 10% chance for high intensity (6-10) - 80% chance for low intensity (0-4) - 10% chance for medium intensity (4-6)</p>"},{"location":"api-reference/models/emotion/#usage-example","title":"Usage Example","text":"<pre><code># Create new emotion instance\nemotion = Emotion(\n    emotion={\n        \"joy\": 5.0,\n        \"trust\": 3.0\n    },\n    update_alpha=0.7,\n    decay_alpha=0.01\n)\n\n# Update emotions based on events\nemotion.update([\n    {\n        \"emotion\": \"joy\",\n        \"change\": 2,\n        \"explanation\": \"Had a great conversation\"\n    }\n])\n\n# Get current emotional state\ncurrent_state = emotion.impression\ndominant_emotion = emotion.extreme_emotion\n</code></pre>"},{"location":"api-reference/models/emotion/#integration-points","title":"Integration Points","text":""},{"location":"api-reference/models/emotion/#character-system","title":"Character System","text":"<ul> <li>Emotional state influences character decisions</li> <li>Events trigger emotional updates</li> <li>Emotional memory affects relationships</li> </ul>"},{"location":"api-reference/models/emotion/#memory-system","title":"Memory System","text":"<ul> <li>Significant emotional events are stored</li> <li>Emotional context for memories</li> <li>Event-emotion associations</li> </ul>"},{"location":"api-reference/models/emotion/#behavior-system","title":"Behavior System","text":"<ul> <li>Emotions influence action choices</li> <li>Emotional thresholds trigger behaviors</li> <li>Mood affects social interactions </li> </ul>"},{"location":"api-reference/models/entity-factory/","title":"Entity Factory API Reference","text":"<p>The Entity Factory module provides functionality for creating new agents and characters in the simulation, handling inheritance and trait generation.</p>"},{"location":"api-reference/models/entity-factory/#agentcreation-class","title":"AgentCreation Class","text":"<p>A static utility class that handles the creation of new agents based on parent characteristics.</p>"},{"location":"api-reference/models/entity-factory/#constants","title":"Constants","text":"<pre><code>default_bio = \"The biography of your parents are: Parent A: {p1bio} and Parent B: {p2bio}\"\n</code></pre>"},{"location":"api-reference/models/entity-factory/#static-methods","title":"Static Methods","text":""},{"location":"api-reference/models/entity-factory/#agent-creation","title":"Agent Creation","text":"<pre><code>@staticmethod\ndef build_new_agent_from_msg(msg: dict, character_ls: CharacterList) -&gt; Character\n</code></pre> <p>Creates a new agent from a message containing agent specifications.</p> <pre><code>@staticmethod\ndef build_new_agent(agent_id: int, character_ls: CharacterList) -&gt; Character\n</code></pre> <p>Builds a new agent with inherited traits from parent agents.</p>"},{"location":"api-reference/models/entity-factory/#parent-management","title":"Parent Management","text":"<pre><code>@staticmethod\ndef find_parent_agent(agent_id: int, character_ls: CharacterList) -&gt; tuple[Character, Character]\n</code></pre> <p>Locates and returns both parent agents for a given agent ID.</p>"},{"location":"api-reference/models/entity-factory/#trait-generation","title":"Trait Generation","text":"<pre><code>@staticmethod\ndef create_bio(par1: Character, par2: Character) -&gt; dict\n</code></pre> <p>Generates a biography for the new agent based on parent biographies using LLM.</p> <pre><code>@staticmethod\ndef create_mbti(par1: Character, par2: Character) -&gt; dict\n</code></pre> <p>Creates MBTI personality type through trait inheritance from parents.</p>"},{"location":"api-reference/models/entity-factory/#resource-allocation","title":"Resource Allocation","text":"<pre><code>@staticmethod\ndef allocate_llm(self) -&gt; dict\n</code></pre> <p>Assigns LLM configuration to the new agent based on available API resources.</p>"},{"location":"api-reference/models/entity-factory/#creation-process","title":"Creation Process","text":"<ol> <li> <p>Message Processing    <code>python    content = json.loads(msg['msg'])    agent_id = content['agent_guid']</code></p> </li> <li> <p>Parent Identification    <code>python    par1, par2 = AgentCreation.find_parent_agent(agent_id, character_ls)</code></p> </li> <li> <p>Feature Generation    <code>python    new_chara_features = {        \"bio\": created_bio,        \"mbti\": inherited_mbti,        \"name\": assigned_name,        \"llm_cfg\": allocated_config    }</code></p> </li> </ol>"},{"location":"api-reference/models/entity-factory/#usage-example","title":"Usage Example","text":"<pre><code># Create new agent from message\nnew_agent = AgentCreation.build_new_agent_from_msg(\n    msg={\n        \"msg\": json.dumps({\n            \"agent_guid\": 123,\n            \"parent_agent_guid1\": 456,\n            \"parent_agent_guid2\": 789\n        })\n    },\n    character_ls=character_list\n)\n\n# Direct agent creation\nnew_agent = AgentCreation.build_new_agent(\n    agent_id=123,\n    character_ls=character_list\n)\n</code></pre>"},{"location":"api-reference/models/entity-factory/#integration-points","title":"Integration Points","text":""},{"location":"api-reference/models/entity-factory/#database-integration","title":"Database Integration","text":"<ul> <li>Agent data retrieval</li> <li>Parent information storage</li> <li>New agent registration</li> </ul>"},{"location":"api-reference/models/entity-factory/#llm-integration","title":"LLM Integration","text":"<ul> <li>Biography generation</li> <li>Personality trait inheritance</li> <li>Character backstory creation</li> </ul>"},{"location":"api-reference/models/entity-factory/#resource-management","title":"Resource Management","text":"<ul> <li>API allocation</li> <li>Load balancing between cheap and official APIs</li> <li>Configuration management</li> </ul>"},{"location":"api-reference/models/entity-factory/#name-management","title":"Name Management","text":"<ul> <li>Unique name generation</li> <li>Name inheritance patterns</li> <li>Name validation </li> </ul>"},{"location":"api-reference/models/market-adjust/","title":"Market Adjust API Reference","text":"<p>The Market Adjust system manages dynamic pricing for artworks based on market conditions, using embedding-based similarity to adjust prices according to market trends.</p>"},{"location":"api-reference/models/market-adjust/#overview","title":"Overview","text":"<p>The system consists of: - Market-based price adjustment - Embedding similarity calculations - Database integration for artwork pricing - Automated price fluctuation handling</p>"},{"location":"api-reference/models/market-adjust/#marketadjust-class","title":"MarketAdjust Class","text":"<p>The MarketAdjust class handles market-based price adjustments for artworks.</p>"},{"location":"api-reference/models/market-adjust/#properties","title":"Properties","text":"<ul> <li><code>commodities</code>: List of commodities to track</li> <li><code>model</code>: Embedding model (default: OpenAI text-embedding-3-large)</li> <li><code>artwork_milvus_data_store</code>: Milvus collection for artwork data</li> </ul>"},{"location":"api-reference/models/market-adjust/#methods","title":"Methods","text":""},{"location":"api-reference/models/market-adjust/#market-updates","title":"Market Updates","text":"<pre><code>def update(self) -&gt; None\n</code></pre> <p>Retrieves market information and triggers price updates.</p> <pre><code>def get_market_info(self) -&gt; str\n</code></pre> <p>Retrieves current market information for analysis.</p> <pre><code>def update_market(self, market: str) -&gt; None\n</code></pre> <p>Updates artwork prices based on market conditions using similarity analysis.</p>"},{"location":"api-reference/models/market-adjust/#embedding-operations","title":"Embedding Operations","text":"<pre><code>def call_model(self, commodity: str) -&gt; list[float]\n</code></pre> <p>Generates embeddings for market analysis using the configured model.</p> <pre><code>def get_commodity_embed(self, commodity) -&gt; list[float]\n</code></pre> <p>Retrieves or generates embeddings for a commodity.</p>"},{"location":"api-reference/models/market-adjust/#price-adjustments","title":"Price Adjustments","text":"<pre><code>def price_fluctuation(self, market_embed: list[float], commodity_embed: list[float]) -&gt; float\n</code></pre> <p>Calculates price adjustments based on embedding similarity.</p> <pre><code>def price_fluctuation_by_sim(self, resource_id: str, sim: float) -&gt; float\n</code></pre> <p>Calculates and applies price adjustments using pre-computed similarity.</p> <pre><code>def artwork_price_change(self, artwork_id: str, delta_price: float) -&gt; Optional[float]\n</code></pre> <p>Updates artwork price in database and returns new price.</p>"},{"location":"api-reference/models/market-adjust/#usage-example","title":"Usage Example","text":"<pre><code># Initialize market adjuster\nmarket = MarketAdjust(\n    commodities=[],\n    model=OpenAIEmbeddings(model=\"text-embedding-3-large\")\n)\n\n# Update market prices\nmarket.update()\n\n# Manual market update\nmarket_news = \"Market trend update: Increased demand for abstract art\"\nmarket.update_market(market_news)\n\n# Direct price adjustment\nartwork_id = \"art123\"\nsimilarity = 0.75\nadjustment = market.price_fluctuation_by_sim(artwork_id, similarity)\n</code></pre>"},{"location":"api-reference/models/market-adjust/#implementation-notes","title":"Implementation Notes","text":""},{"location":"api-reference/models/market-adjust/#similarity-calculation","title":"Similarity Calculation","text":"<ul> <li>Uses cosine similarity between embeddings</li> <li>Similarity range: 0 to 1</li> <li>Price adjustment formula: (similarity - 0.4) * 1000</li> </ul>"},{"location":"api-reference/models/market-adjust/#market-analysis","title":"Market Analysis","text":"<ul> <li>High similarity search (top 20 matches)</li> <li>Low similarity search (bottom 20 matches)</li> <li>Configurable similarity thresholds</li> <li>Automatic price updates based on market trends</li> </ul>"},{"location":"api-reference/models/market-adjust/#database-integration","title":"Database Integration","text":"<ul> <li>Milvus vector database for artwork data</li> <li>Automatic price updates in database</li> <li>Price change logging and tracking</li> </ul>"},{"location":"api-reference/models/market-adjust/#embedding-requirements","title":"Embedding Requirements","text":"<ul> <li>Commodities must have either:</li> <li>'description' attribute</li> <li>'embed' attribute</li> <li>Descriptions must be strings</li> <li>Embeddings must be compatible with model</li> </ul>"},{"location":"api-reference/models/market-adjust/#configuration-parameters","title":"Configuration Parameters","text":""},{"location":"api-reference/models/market-adjust/#search-parameters","title":"Search Parameters","text":"<pre><code>{\n    \"metric_type\": \"COSINE\",\n    \"params\": {\n        \"radius\": 0.0,    # Outer search boundary\n        \"range_filter\": 0.2  # Inner search boundary\n    }\n}\n</code></pre>"},{"location":"api-reference/models/market-adjust/#price-adjustment-constraints","title":"Price Adjustment Constraints","text":"<ul> <li>Base adjustment multiplier: 1000</li> <li>Similarity threshold: 0.4</li> <li>Adjustments can be positive or negative</li> <li>No maximum adjustment limit</li> </ul>"},{"location":"api-reference/models/market-adjust/#error-handling","title":"Error Handling","text":"<ul> <li>Validates commodity attributes</li> <li>Verifies description types</li> <li>Checks artwork existence in database</li> <li>Logs price change notifications </li> </ul>"},{"location":"api-reference/models/memory/","title":"Memory Model API Reference","text":"<p>The Memory Model manages different types of memory storage and retrieval for characters in the simulation, including entity memory, location memory, and transaction records.</p>"},{"location":"api-reference/models/memory/#overview","title":"Overview","text":"<p>The Memory system consists of several key components: - Entity memory for character interactions - Location memory for building/place information  - Transaction records for economic activities - Working memory for temporary storage - Numeric memory with moving average updates</p>"},{"location":"api-reference/models/memory/#memory-class","title":"Memory Class","text":"<p>The main Memory class handles persistent storage and retrieval of memories.</p>"},{"location":"api-reference/models/memory/#properties","title":"Properties","text":"<ul> <li><code>entity_name</code>: Name of the entity owning this memory</li> <li><code>datastore</code>: MilvusDataStore instance for vector storage</li> <li><code>numeric_memory</code>: Dictionary of numeric values with moving average updates</li> </ul>"},{"location":"api-reference/models/memory/#methods","title":"Methods","text":""},{"location":"api-reference/models/memory/#memory-storage","title":"Memory Storage","text":"<pre><code>def store(self, memory: Dict[str, Any]) -&gt; None\n</code></pre> <p>Stores a memory object across entity, location and transaction collections.</p> <pre><code>def store_entity_memory(self, memory: Dict[str, Any]) -&gt; None\n</code></pre> <p>Stores memories related to people/entities.</p> <pre><code>def store_location_memory(self, memory: Dict[str, Any]) -&gt; None\n</code></pre> <p>Stores memories related to buildings/locations.</p> <pre><code>def store_transaction_memory(self, memory: Dict[str, Any]) -&gt; None\n</code></pre> <p>Stores memories related to economic transactions.</p>"},{"location":"api-reference/models/memory/#memory-retrieval","title":"Memory Retrieval","text":"<pre><code>def get_memory(self, main_category: str, name: str) -&gt; Dict[str, Any]\n</code></pre> <p>Retrieves memories by category and name.</p> <pre><code>def get_people_memory(self, name: str, default=[]) -&gt; Dict[str, Any]\n</code></pre> <p>Retrieves memories about specific people.</p> <pre><code>def get_building_memory(self, name: str, default=[]) -&gt; Dict[str, Any]\n</code></pre> <p>Retrieves memories about specific buildings.</p> <pre><code>def get_records_memory(self, name: str) -&gt; Dict[str, Any]\n</code></pre> <p>Retrieves transaction records by name.</p>"},{"location":"api-reference/models/memory/#workingmemory-class","title":"WorkingMemory Class","text":"<p>Manages temporary memory storage that can be forgotten.</p>"},{"location":"api-reference/models/memory/#methods_1","title":"Methods","text":"<pre><code>def store_memory(self, name: str, memory: Any) -&gt; None\n</code></pre> <p>Stores a temporary memory.</p> <pre><code>def retrieve_by_name(self, name: str, default=None) -&gt; Any\n</code></pre> <p>Retrieves a temporary memory by name.</p> <pre><code>def forget_by_name(self, name: str) -&gt; None\n</code></pre> <p>Removes a temporary memory.</p>"},{"location":"api-reference/models/memory/#memory-types","title":"Memory Types","text":""},{"location":"api-reference/models/memory/#peoplememory","title":"PeopleMemory","text":"<p>Stores memories about specific people.</p>"},{"location":"api-reference/models/memory/#properties_1","title":"Properties","text":"<ul> <li><code>name</code>: Person's name</li> <li><code>relationship</code>: Relationship status</li> <li><code>impression</code>: Overall impression</li> <li><code>episodicMemory</code>: List of specific memories</li> </ul>"},{"location":"api-reference/models/memory/#buildingmemory","title":"BuildingMemory","text":"<p>Stores memories about buildings and locations.</p>"},{"location":"api-reference/models/memory/#properties_2","title":"Properties","text":"<ul> <li><code>name</code>: Building name</li> <li><code>relationship</code>: Relationship with the building</li> <li><code>impression</code>: Overall impression</li> <li><code>episodicMemory</code>: List of specific memories</li> </ul>"},{"location":"api-reference/models/memory/#experiencememory","title":"ExperienceMemory","text":"<p>Stores memories about plans and actions.</p>"},{"location":"api-reference/models/memory/#properties_3","title":"Properties","text":"<ul> <li><code>plan</code>: Overall plan</li> <li><code>acts</code>: List of specific actions</li> </ul>"},{"location":"api-reference/models/memory/#usage-example","title":"Usage Example","text":"<pre><code># Create memory instance for a character\nmemory = Memory(entity_name=\"John\")\n\n# Store a new memory\nmemory.store({\n    \"people\": {\n        \"Alice\": {\n            \"relationship\": \"friend\",\n            \"impression\": \"friendly\",\n            \"memory\": \"Met at the coffee shop\"\n        }\n    },\n    \"building\": {\n        \"Coffee Shop\": {\n            \"relationship\": \"frequent customer\",\n            \"impression\": \"cozy place\",\n            \"memory\": \"Good coffee and atmosphere\"\n        }\n    }\n})\n\n# Retrieve memories\nalice_memories = memory.get_people_memory(\"Alice\")\ncoffee_shop_memories = memory.get_building_memory(\"Coffee Shop\")\n</code></pre>"},{"location":"api-reference/models/monologue/","title":"Inner Monologue API Reference","text":"<p>The Inner Monologue system manages characters' internal thoughts and emotional expressions, providing a mechanism for characters to process their perceptions, plans, memories, and emotions.</p>"},{"location":"api-reference/models/monologue/#overview","title":"Overview","text":"<p>The Inner Monologue system consists of two main components: - MonologuePrompt for generating prompts for internal dialogue - InnerMonologue for managing and processing character's internal thoughts</p>"},{"location":"api-reference/models/monologue/#monologueprompt-class","title":"MonologuePrompt Class","text":"<p>The MonologuePrompt class handles the generation of prompts for character's internal dialogue.</p>"},{"location":"api-reference/models/monologue/#properties","title":"Properties","text":"<ul> <li><code>character</code>: Reference to the associated character</li> <li><code>prompt_type</code>: Type of prompt (PromptType.INNER_MONOLOGUE)</li> <li><code>PROMPT</code>: Template for generating monologue prompts</li> </ul>"},{"location":"api-reference/models/monologue/#methods","title":"Methods","text":"<pre><code>def create_prompt(self, **kwargs) -&gt; str\n</code></pre> <p>Creates a formatted prompt using character attributes and provided parameters.</p> <pre><code>def format_attr(self, **kwargs) -&gt; str\n</code></pre> <p>Formats the prompt template by replacing placeholders with actual values.</p>"},{"location":"api-reference/models/monologue/#default-prompt-structure","title":"Default Prompt Structure","text":"<p>The prompt includes: - Character name and bio - World understanding from memory - Internal status - Current plan and step - Emotional state - Criteria for monologue generation</p>"},{"location":"api-reference/models/monologue/#innermonologue-class","title":"InnerMonologue Class","text":"<p>The InnerMonologue class manages a character's internal dialogue system.</p>"},{"location":"api-reference/models/monologue/#properties_1","title":"Properties","text":"<ul> <li><code>character</code>: Reference to the associated character</li> <li><code>content</code>: Dictionary storing current monologue content</li> <li><code>prompt</code>: Associated MonologuePrompt instance</li> </ul>"},{"location":"api-reference/models/monologue/#methods_1","title":"Methods","text":""},{"location":"api-reference/models/monologue/#content-management","title":"Content Management","text":"<pre><code>def sample_monologue(self, size=2) -&gt; list\n</code></pre> <p>Returns a random sample of monologue entries.</p> <pre><code>def set_monologue(self, content: dict) -&gt; None\n</code></pre> <p>Updates monologue content and saves the response.</p>"},{"location":"api-reference/models/monologue/#llm-integration","title":"LLM Integration","text":"<pre><code>def build_prompt(self) -&gt; str\n</code></pre> <p>Constructs prompt for LLM using character's emotional state.</p> <pre><code>def call_llm(self) -&gt; None\n</code></pre> <p>Asynchronously generates new monologue content using LLM.</p>"},{"location":"api-reference/models/monologue/#state-management","title":"State Management","text":"<pre><code>@property\ndef inner_monologue(self) -&gt; dict\n</code></pre> <p>Returns current monologue content.</p> <pre><code>@property\ndef emoji(self) -&gt; str\n</code></pre> <p>Returns associated emoji for current emotional state.</p>"},{"location":"api-reference/models/monologue/#message-format","title":"Message Format","text":""},{"location":"api-reference/models/monologue/#example-monologue-response","title":"Example Monologue Response","text":"<pre><code>{\n    \"monologue_understanding\": \"Jack is busy, I should not bother him.\",\n    \"monologue_status\": \"I'm feeling tired and hungry.\",\n    \"monologue_plan\": \"I should go to the library to find the book.\",\n    \"monologue_emotion\": \"Feeling so sad, god damn.\",\n    \"emoji\": \"\ud83d\ude1f\"\n}\n</code></pre>"},{"location":"api-reference/models/monologue/#usage-example","title":"Usage Example","text":"<pre><code># Create inner monologue for a character\nmonologue = InnerMonologue(character)\n\n# Generate new monologue\nmonologue.call_llm()\n\n# Access monologue content\ncurrent_thoughts = monologue.inner_monologue\nemotional_state = monologue.emoji\n\n# Sample random thoughts\nsample_thoughts = monologue.sample_monologue(size=2)\n</code></pre>"},{"location":"api-reference/models/monologue/#implementation-notes","title":"Implementation Notes","text":"<ul> <li>Monologues are limited to 20 words per category</li> <li>Uses asynchronous LLM calls for content generation</li> <li>Integrates with character's emotion and memory systems</li> <li>Maintains consistent first-person narration style</li> <li>Automatically saves prompts and responses for record keeping </li> </ul>"},{"location":"api-reference/models/preference/","title":"Preference Model API Reference","text":"<p>The Preference Model manages character preferences across different categories, providing a system for tracking and evolving character tastes and preferences over time.</p>"},{"location":"api-reference/models/preference/#overview","title":"Overview","text":"<p>The Preference Model consists of: - Category-based preference scoring - Dynamic preference management - Preference evolution mechanics - Top preference tracking</p>"},{"location":"api-reference/models/preference/#preferencemodel-class","title":"PreferenceModel Class","text":"<p>The PreferenceModel class handles preference scoring and management across multiple categories.</p>"},{"location":"api-reference/models/preference/#properties","title":"Properties","text":"<ul> <li><code>categories</code>: List of available preference categories (style_a through style_l)</li> <li><code>preferences</code>: Dictionary mapping categories to preference scores (0-10)</li> </ul>"},{"location":"api-reference/models/preference/#class-variables","title":"Class Variables","text":"<pre><code>categories = [\n    \"style_a\", \"style_b\", \"style_c\", \"style_d\", \n    \"style_e\", \"style_f\", \"style_g\", \"style_h\", \n    \"style_i\", \"style_j\", \"style_k\", \"style_l\"\n]\n</code></pre>"},{"location":"api-reference/models/preference/#methods","title":"Methods","text":""},{"location":"api-reference/models/preference/#preference-management","title":"Preference Management","text":"<pre><code>def __init__(self, preferences: Dict[str, float]={}) -&gt; None\n</code></pre> <p>Initializes preference model with optional initial preferences. Default values are randomly generated between 0 and 10.</p> <pre><code>def update_preferences(self) -&gt; None\n</code></pre> <p>Updates preference values with small random adjustments (-0.2 to +0.2), maintaining values between 0 and 10.</p>"},{"location":"api-reference/models/preference/#preference-access","title":"Preference Access","text":"<pre><code>@property\ndef top_preferences(self, count=1) -&gt; str\n</code></pre> <p>Returns comma-separated string of top N preferred categories.</p> <pre><code>@property\ndef preference_scores(self) -&gt; Dict[str, float]\n</code></pre> <p>Returns dictionary of all current preference scores.</p>"},{"location":"api-reference/models/preference/#usage-example","title":"Usage Example","text":"<pre><code># Create preference model with default random values\npreferences = PreferenceModel()\n\n# Create with specific initial preferences\ninitial_prefs = {\n    \"style_a\": 8.5,\n    \"style_b\": 3.2,\n    \"style_c\": 6.7\n}\npreferences = PreferenceModel(initial_prefs)\n\n# Get top preference\ntop_style = preferences.top_preferences\n\n# Get all preference scores\nall_scores = preferences.preference_scores\n\n# Update preferences\npreferences.update_preferences()\n</code></pre>"},{"location":"api-reference/models/preference/#implementation-notes","title":"Implementation Notes","text":"<ul> <li>Preference scores are constrained between 0 and 10</li> <li>Unspecified preferences are initialized with random values</li> <li>Preference updates use small random adjustments</li> <li>Top preferences can be retrieved individually or in groups</li> <li>All preference categories are initialized even if not specified</li> <li>Invalid preference values will raise an assertion error</li> </ul>"},{"location":"api-reference/models/preference/#value-constraints","title":"Value Constraints","text":""},{"location":"api-reference/models/preference/#preference-scores","title":"Preference Scores","text":"<ul> <li>Minimum value: 0.0</li> <li>Maximum value: 10.0</li> <li>Type: float</li> </ul>"},{"location":"api-reference/models/preference/#update-adjustments","title":"Update Adjustments","text":"<ul> <li>Minimum adjustment: -0.2</li> <li>Maximum adjustment: +0.2</li> <li>Frequency: Per update call </li> </ul>"},{"location":"api-reference/models/resource-generator/","title":"Resource Generator API Reference","text":"<p>The Resource Generator system provides image generation capabilities through OpenAI's DALL-E model, managing the creation and caching of AI-generated artwork within the simulation.</p>"},{"location":"api-reference/models/resource-generator/#overview","title":"Overview","text":"<p>The system consists of two main components: - DALLEAgent for handling image generation requests - Caching mechanism for efficient resource management</p>"},{"location":"api-reference/models/resource-generator/#dalleagent-class","title":"DALLEAgent Class","text":"<p>The DALLEAgent class inherits from ConversableAgent and manages DALL-E image generation requests.</p>"},{"location":"api-reference/models/resource-generator/#properties","title":"Properties","text":"<ul> <li><code>owner</code>: Reference to the owning Character instance</li> <li><code>client</code>: OpenAI client instance for API calls</li> <li><code>api_key</code>: OpenAI API key for authentication</li> </ul>"},{"location":"api-reference/models/resource-generator/#methods","title":"Methods","text":""},{"location":"api-reference/models/resource-generator/#image-generation","title":"Image Generation","text":"<pre><code>def draw(self, prompt: str, api_key: str = None) -&gt; Drawing\n</code></pre> <p>Generates an image using DALL-E based on the provided prompt. Returns a Drawing instance.</p> <pre><code>def generate_dalle_reply(self, messages: Optional[List[Dict]], sender: Agent, config) -&gt; tuple[bool, dict]\n</code></pre> <p>Processes messages and generates image replies. Returns success status and image information.</p>"},{"location":"api-reference/models/resource-generator/#asynchronous-operations","title":"Asynchronous Operations","text":"<pre><code>async def a_generate_dalle_reply(self, messages: Optional[List[Dict]], sender: Agent, config)\n</code></pre> <p>Asynchronous version of generate_dalle_reply.</p> <pre><code>async def a_process_then_reply(self, message, sender: Agent, restart=True, silent=True)\n</code></pre> <p>Processes messages and generates replies asynchronously.</p>"},{"location":"api-reference/models/resource-generator/#validation","title":"Validation","text":"<pre><code>def sanity_check(self, id, image_url, description) -&gt; bool\n</code></pre> <p>Validates image generation results for proper formatting and content.</p>"},{"location":"api-reference/models/resource-generator/#dall-e-call-function","title":"DALL-E Call Function","text":"<pre><code>def dalle_call(client: OpenAI, model: str, prompt: str, size: str, quality: str, n: int) -&gt; str\n</code></pre> <p>Handles direct DALL-E API calls with caching support.</p>"},{"location":"api-reference/models/resource-generator/#parameters","title":"Parameters","text":"<ul> <li><code>client</code>: OpenAI client instance</li> <li><code>model</code>: DALL-E model version</li> <li><code>prompt</code>: Image generation prompt</li> <li><code>size</code>: Output image dimensions</li> <li><code>quality</code>: Image quality setting</li> <li><code>n</code>: Number of images to generate</li> </ul>"},{"location":"api-reference/models/resource-generator/#returns","title":"Returns","text":"<ul> <li>URL string for the generated image</li> </ul>"},{"location":"api-reference/models/resource-generator/#usage-example","title":"Usage Example","text":"<pre><code># Initialize DALL-E agent\ndalle_agent = DALLEAgent(\n    name=\"ArtGenerator\",\n    owner=character,\n    llm_config={\n        \"config_list\": [{\n            \"api_key\": \"your-api-key\",\n            \"base_url\": \"https://api.openai.com/v1\"\n        }]\n    }\n)\n\n# Generate image\nmessage = {\"content\": \"A serene landscape with mountains at sunset\"}\nresponse = await dalle_agent.a_process_then_reply(\n    message=message,\n    sender=character\n)\n\n# Access generated image\nimage_url = response['img_url']\nimage_id = response['img_id']\n</code></pre>"},{"location":"api-reference/models/resource-generator/#cache-implementation","title":"Cache Implementation","text":"<p>The system uses diskcache for efficient resource management:</p> <pre><code>cache = Cache(\".cache/\")\nkey = (model, prompt, size, quality, n)\n</code></pre>"},{"location":"api-reference/models/resource-generator/#cache-features","title":"Cache Features","text":"<ul> <li>Disk-based storage in <code>.cache/</code> directory</li> <li>Key based on generation parameters</li> <li>Automatic retrieval of cached results</li> <li>Fallback to API calls for cache misses</li> </ul>"},{"location":"api-reference/models/resource-generator/#implementation-notes","title":"Implementation Notes","text":"<ul> <li>Supports both synchronous and asynchronous operations</li> <li>Implements error handling and retry logic</li> <li>Maintains image generation history</li> <li>Uses caching to optimize API usage</li> <li>Validates all generated content</li> <li>Integrates with character's drawing collection</li> </ul>"},{"location":"api-reference/models/resource-generator/#response-format","title":"Response Format","text":"<pre><code>{\n    \"img_url\": \"https://...\",\n    \"img_id\": \"uuid-string\"\n}\n</code></pre>"},{"location":"api-reference/models/scheduler/","title":"Scheduler API Reference","text":"<p>The Scheduler system manages character tasks, schedules, and agendas within the simulation, providing a framework for temporal organization of activities.</p>"},{"location":"api-reference/models/scheduler/#overview","title":"Overview","text":"<p>The system consists of three main components: - Schedule management for step-by-step activities - Task tracking with status management - Agenda organization for time-based events</p>"},{"location":"api-reference/models/scheduler/#schedule-class","title":"Schedule Class","text":"<p>The Schedule class manages sequences of steps and their progression.</p>"},{"location":"api-reference/models/scheduler/#properties","title":"Properties","text":"<ul> <li><code>steps</code>: List of sequential steps to complete</li> <li><code>summary</code>: Overview description of the schedule</li> <li><code>current_index</code>: Current position in the step sequence</li> </ul>"},{"location":"api-reference/models/scheduler/#methods","title":"Methods","text":"<pre><code>def advance(self) -&gt; str\n</code></pre> <p>Advances to the next step in the schedule. Returns the next step or completion message.</p> <pre><code>def set_steps(self, steps: list[str], summary: str, **kwargs) -&gt; None\n</code></pre> <p>Initializes the schedule with a list of steps and summary description.</p>"},{"location":"api-reference/models/scheduler/#state-properties","title":"State Properties","text":"<pre><code>@property\ndef current_step(self) -&gt; str\n</code></pre> <p>Returns the current active step or status message.</p> <pre><code>@property\ndef is_empty(self) -&gt; bool\n</code></pre> <p>Checks if schedule has been initialized.</p> <pre><code>@property\ndef is_complete(self) -&gt; bool\n</code></pre> <p>Checks if all steps have been completed.</p>"},{"location":"api-reference/models/scheduler/#task-class","title":"Task Class","text":"<p>The Task class manages individual tasks and their execution states.</p>"},{"location":"api-reference/models/scheduler/#properties_1","title":"Properties","text":"<ul> <li><code>description</code>: Task description</li> <li><code>timing</code>: Scheduled time for the task</li> <li><code>status</code>: Current task status</li> <li><code>schedule</code>: Associated Schedule instance</li> </ul>"},{"location":"api-reference/models/scheduler/#constants","title":"Constants","text":"<pre><code>PENDING, ACTIVE, PAUSED, DONE = 'pending', 'active', 'paused', 'done'\n</code></pre>"},{"location":"api-reference/models/scheduler/#methods_1","title":"Methods","text":"<pre><code>def update_status(self) -&gt; None\n</code></pre> <p>Updates task status based on schedule completion.</p> <pre><code>def set_status(self, status: str) -&gt; None\n</code></pre> <p>Sets task status to specified state.</p> <pre><code>def update_schedule(self, schedule: Schedule) -&gt; None\n</code></pre> <p>Associates a Schedule instance with the task.</p>"},{"location":"api-reference/models/scheduler/#agenda-class","title":"Agenda Class","text":"<p>The Agenda class manages collections of time-based tasks.</p>"},{"location":"api-reference/models/scheduler/#properties_2","title":"Properties","text":"<ul> <li><code>agenda</code>: LimitedLengthDict of tasks indexed by time</li> <li><code>candidate_status</code>: List of valid task statuses</li> </ul>"},{"location":"api-reference/models/scheduler/#methods_2","title":"Methods","text":"<pre><code>def add_event(self, event: str, time: str) -&gt; None\n</code></pre> <p>Adds a new event to the agenda.</p> <pre><code>def check_date(self, date: str) -&gt; Optional[Task]\n</code></pre> <p>Retrieves task scheduled for specified date.</p>"},{"location":"api-reference/models/scheduler/#task-access","title":"Task Access","text":"<pre><code>@property\ndef incompleted_events(self) -&gt; list[Task]\n</code></pre> <p>Returns list of tasks not marked as completed.</p> <pre><code>@property\ndef completed_events(self) -&gt; list[Task]\n</code></pre> <p>Returns list of completed tasks.</p>"},{"location":"api-reference/models/scheduler/#usage-example","title":"Usage Example","text":"<pre><code># Create and manage a schedule\nschedule = Schedule()\nschedule.set_steps(\n    steps=[\"Go to cafe\", \"Order coffee\", \"Meet with friend\"],\n    summary=\"Coffee meeting with friend\"\n)\n\n# Create and track a task\ntask = Task(\n    description=\"Meeting with Dorothy Johnson\",\n    timing=\"2021-10-01 14:00\"\n)\ntask.update_schedule(schedule)\n\n# Manage agenda\nagenda = Agenda()\nagenda.add_event(\n    event=\"Performance review meeting\",\n    time=\"2021-10-01 14:00\"\n)\n\n# Check schedule progress\ncurrent_step = schedule.current_step\nschedule.advance()\n</code></pre>"},{"location":"api-reference/models/scheduler/#implementation-notes","title":"Implementation Notes","text":""},{"location":"api-reference/models/scheduler/#task-states","title":"Task States","text":"<ul> <li>Tasks can be in one of four states: pending, active, paused, or done</li> <li>State transitions are validated against allowed states</li> <li>Status updates can be triggered by schedule completion</li> </ul>"},{"location":"api-reference/models/scheduler/#agenda-management","title":"Agenda Management","text":"<ul> <li>Uses LimitedLengthDict to maintain a maximum of 20 events</li> <li>Automatically removes oldest events when limit is reached</li> <li>Provides filtering for completed and incomplete events</li> </ul>"},{"location":"api-reference/models/scheduler/#schedule-tracking","title":"Schedule Tracking","text":"<ul> <li>Maintains step-by-step progression</li> <li>Provides completion status</li> <li>Supports empty state handling </li> </ul>"},{"location":"api-reference/models/state-manager/","title":"State Manager API Reference","text":"<p>The State Manager system handles internal character states and emotions, managing numerical values and tracking significant events that affect character behavior.</p>"},{"location":"api-reference/models/state-manager/#overview","title":"Overview","text":"<p>The State Manager consists of: - State value management (0-10 scale) - State change tracking - Event significance tracking - Automatic state decay</p>"},{"location":"api-reference/models/state-manager/#statemanager-class","title":"StateManager Class","text":"<p>The StateManager class handles internal state tracking and modifications.</p>"},{"location":"api-reference/models/state-manager/#properties","title":"Properties","text":"<ul> <li><code>states</code>: Dictionary mapping state types to numerical values (0-10)</li> <li><code>update_rate</code>: Rate at which states change (default 0.7)</li> <li><code>decay_rate</code>: Rate of automatic state decay (default 0.01)</li> <li><code>significant_events</code>: Record of events causing major state changes</li> </ul>"},{"location":"api-reference/models/state-manager/#class-variables","title":"Class Variables","text":"<pre><code>state_options = [\"positive_a\", \"positive_b\", \"negative_a\", \"neutral_a\", \n                 \"negative_b\", \"negative_c\", \"negative_d\", \"positive_c\"]\n\npositive_states = [\"positive_a\", \"positive_b\", \"positive_c\", \"neutral_a\"]\nnegative_states = [\"negative_a\", \"neutral_a\", \"negative_b\", \"negative_c\", \"negative_d\"]\n</code></pre>"},{"location":"api-reference/models/state-manager/#methods","title":"Methods","text":""},{"location":"api-reference/models/state-manager/#state-management","title":"State Management","text":"<pre><code>def initialize_states(self) -&gt; None\n</code></pre> <p>Initializes states with balanced random values.</p> <pre><code>def update_states(self, state_changes: list[dict] = None) -&gt; None\n</code></pre> <p>Updates states based on provided changes or applies decay if None.</p> <pre><code>def update_single_state(self, state_type: str, intensity_delta: float, trigger: str = None) -&gt; None\n</code></pre> <p>Updates a single state value with validation.</p>"},{"location":"api-reference/models/state-manager/#state-decay","title":"State Decay","text":"<pre><code>def apply_decay(self, state_type=None, custom_rate=None) -&gt; None\n</code></pre> <p>Applies natural decay to states over time.</p>"},{"location":"api-reference/models/state-manager/#event-tracking","title":"Event Tracking","text":"<pre><code>def record_significant_event(self, state_type: str, state_delta: float, trigger: str) -&gt; None\n</code></pre> <p>Records events that cause significant state changes.</p>"},{"location":"api-reference/models/state-manager/#state-access","title":"State Access","text":"<pre><code>@property\ndef current_states(self) -&gt; Dict[str, float]\n</code></pre> <p>Returns dictionary of all current state values.</p> <pre><code>@property\ndef most_significant_event(self) -&gt; tuple[str, str]\n</code></pre> <p>Returns the most impactful event and affected state.</p> <pre><code>@property\ndef dominant_state(self) -&gt; dict\n</code></pre> <p>Returns the highest-value state and its value.</p>"},{"location":"api-reference/models/state-manager/#usage-example","title":"Usage Example","text":"<pre><code># Initialize state manager\nstate_manager = StateManager(\n    initial_state={\"positive_a\": 7.0, \"negative_a\": 3.0},\n    update_rate=0.7,\n    decay_rate=0.01\n)\n\n# Update states\nstate_changes = [{\n    'state': 'positive_a',\n    'change': 2.0,\n    'reason': 'Received good news'\n}]\nstate_manager.update_states(state_changes)\n\n# Check current states\ncurrent_states = state_manager.current_states\ndominant = state_manager.dominant_state\n\n# Apply decay\nstate_manager.apply_decay()\n\n# Check significant events\ntrigger, state = state_manager.most_significant_event\n</code></pre>"},{"location":"api-reference/models/state-manager/#implementation-notes","title":"Implementation Notes","text":""},{"location":"api-reference/models/state-manager/#state-values","title":"State Values","text":"<ul> <li>All states are constrained between 0 and 10</li> <li>Values are rounded to 2 decimal places</li> <li>Initial values are randomly distributed with specific probabilities:</li> <li>10% chance: 6-10 range</li> <li>80% chance: 0-4 range</li> <li>10% chance: 4-6 range</li> </ul>"},{"location":"api-reference/models/state-manager/#state-changes","title":"State Changes","text":"<ul> <li>Intensity changes must be between -5 and 5</li> <li>Changes include trigger reasons for tracking</li> <li>Significant events are tracked separately</li> <li>State types must be from predefined options</li> </ul>"},{"location":"api-reference/models/state-manager/#decay-system","title":"Decay System","text":"<ul> <li>Automatic decay applies to all states</li> <li>Higher states (&gt;7) decay faster</li> <li>Lower states may increase slightly</li> <li>Custom decay rates can be specified</li> <li>Decay maintains value bounds (0-10)</li> </ul>"},{"location":"api-reference/models/state-manager/#value-constraints","title":"Value Constraints","text":""},{"location":"api-reference/models/state-manager/#state-values_1","title":"State Values","text":"<ul> <li>Minimum: 0.0</li> <li>Maximum: 10.0</li> <li>Precision: 2 decimal places</li> </ul>"},{"location":"api-reference/models/state-manager/#change-intensity","title":"Change Intensity","text":"<ul> <li>Minimum: -5.0</li> <li>Maximum: 5.0</li> <li>Validation: Required for all changes </li> </ul>"},{"location":"api-reference/models/trader/","title":"Trader Model API Reference","text":"<p>The Trader Model represents a specialized character type that handles trading interactions within the simulation. It acts as an invisible NPC designed to manage trade proposals from users.</p>"},{"location":"api-reference/models/trader/#overview","title":"Overview","text":"<p>The Trader system consists of several key components: - Trade proposal handling - Message processing and routing - Game server communication - Limited interaction lifecycle</p>"},{"location":"api-reference/models/trader/#trader-class","title":"Trader Class","text":"<p>The Trader class inherits from Character and specializes in trade-related interactions.</p>"},{"location":"api-reference/models/trader/#properties","title":"Properties","text":"<p>Inherits all properties from Character class, plus: - <code>name</code>: Default value 'Trader' - <code>id</code>: Default value '-1' - <code>bio</code>: Default description of being a trader from a remote town - <code>max_consecutive_auto_reply</code>: Set to 1 to limit interactions</p>"},{"location":"api-reference/models/trader/#methods","title":"Methods","text":""},{"location":"api-reference/models/trader/#message-processing","title":"Message Processing","text":"<pre><code>def push_trade_response(self, message) -&gt; None\n</code></pre> <p>Processes and forwards trade-related messages to the game server.</p> <pre><code>def pre_send(self, recipient: ConversableAgent, message) -&gt; bool\n</code></pre> <p>Pre-processes messages before sending, enforcing single-response limitation.</p> <pre><code>def parse_final_message(self, message, **kwargs) -&gt; str\n</code></pre> <p>Parses and formats trade messages for game server communication. Handles success/failure responses.</p>"},{"location":"api-reference/models/trader/#message-sending","title":"Message Sending","text":"<pre><code>def send(self, message: Dict | str, recipient: Agent, request_reply: bool | None = None, silent: bool | None = False) -&gt; ChatResult\n</code></pre> <p>Customized message sending implementation for trade interactions.</p> <pre><code>async def a_send(self, message: Dict | str, recipient: Agent, request_reply: bool | None = None, silent: bool | None = False) -&gt; Coroutine\n</code></pre> <p>Asynchronous version of send method for trade interactions.</p>"},{"location":"api-reference/models/trader/#usage-example","title":"Usage Example","text":"<pre><code># Create a trader agent\ntrader = Trader(\n    llm_cfg={...},\n    name=\"MarketTrader\",\n    id=\"123\",\n    bio=\"Experienced merchant from the eastern provinces\",\n    money=5000,\n    in_building=market_building\n)\n\n# Process a trade proposal\nmessage = {\n    'content': 'Yes',\n    'artwork_id': 'art123',\n    'price': 100\n}\ntrader.push_trade_response(message)\n</code></pre>"},{"location":"api-reference/models/trader/#message-format","title":"Message Format","text":""},{"location":"api-reference/models/trader/#trade-response-format","title":"Trade Response Format","text":"<pre><code>{\n    \"is_succ\": true,\n    \"artwork_id\": \"artwork_123\",\n    \"price\": 1000,\n    \"to_user_name\": \"user\"\n}\n</code></pre>"},{"location":"api-reference/models/trader/#game-server-message-format","title":"Game Server Message Format","text":"<pre><code>1004@{\"is_succ\": true, \"artwork_id\": \"artwork_123\", \"price\": 1000, \"to_user_name\": \"user\"}\n</code></pre>"},{"location":"api-reference/models/trader/#implementation-notes","title":"Implementation Notes","text":"<ul> <li>The Trader class is designed for single-response interactions</li> <li>Automatically registers a hook for trade response processing</li> <li>Inherits character attributes but specializes in trade functionality</li> <li>Maintains minimal state to focus on trade processing </li> </ul>"},{"location":"api-reference/models/transaction/","title":"Transaction API Reference","text":"<p>The Transaction system manages trading interactions between characters, tracking trade records and handling resource exchanges within the simulation.</p>"},{"location":"api-reference/models/transaction/#overview","title":"Overview","text":"<p>The system consists of two main components: - Trade record management and persistence - Trade execution and validation</p>"},{"location":"api-reference/models/transaction/#traderecord-class","title":"TradeRecord Class","text":"<p>The TradeRecord class maintains detailed information about individual trades.</p>"},{"location":"api-reference/models/transaction/#properties","title":"Properties","text":"<ul> <li><code>buyer</code>: Reference to purchasing Character</li> <li><code>seller</code>: Reference to selling Character</li> <li><code>resource_id</code>: Unique identifier for traded resource</li> <li><code>remaining_budget</code>: Buyer's remaining funds after trade</li> <li><code>like_score</code>: Buyer's preference score for the resource</li> <li><code>emotion</code>: Emotional state during trade</li> <li><code>timestamp</code>: Time of transaction</li> <li><code>market_price</code>: Base market value</li> <li><code>expected_price</code>: Anticipated transaction price</li> <li><code>final_price</code>: Actual transaction price</li> </ul>"},{"location":"api-reference/models/transaction/#methods","title":"Methods","text":"<pre><code>def __str__(self) -&gt; str\n</code></pre> <p>Returns formatted string representation of trade record.</p> <pre><code>def __eq__(self, other: TradeRecord) -&gt; bool\n</code></pre> <p>Compares trade records for equality based on seller, resource, and timestamp.</p>"},{"location":"api-reference/models/transaction/#static-methods","title":"Static Methods","text":"<pre><code>@staticmethod\ndef to_str(trade_record: TradeRecord) -&gt; str\n</code></pre> <p>Converts trade record to string format.</p> <pre><code>@staticmethod\ndef from_str(trade_record_str: str, character_list: CharacterList) -&gt; TradeRecord\n</code></pre> <p>Creates TradeRecord instance from string representation.</p>"},{"location":"api-reference/models/transaction/#trade-class","title":"Trade Class","text":"<p>The Trade class handles trade execution and validation.</p>"},{"location":"api-reference/models/transaction/#methods_1","title":"Methods","text":"<pre><code>@staticmethod\ndef make_trade(\n    buyer: Character, \n    seller: Character, \n    resource_id: str, \n    price: float, \n    resource_type: str = \"drawings\", \n    **kwargs\n) -&gt; Tuple[bool, TradeRecord]\n</code></pre> <p>Executes trade between characters and generates trade record.</p>"},{"location":"api-reference/models/transaction/#parameters","title":"Parameters","text":"<ul> <li><code>buyer</code>: Character initiating purchase</li> <li><code>seller</code>: Character selling resource</li> <li><code>resource_id</code>: ID of resource being traded</li> <li><code>price</code>: Agreed transaction price</li> <li><code>resource_type</code>: Type of resource (default: \"drawings\")</li> <li><code>**kwargs</code>: Additional trade details for record</li> </ul>"},{"location":"api-reference/models/transaction/#returns","title":"Returns","text":"<ul> <li>Tuple containing success status and TradeRecord (if successful)</li> </ul>"},{"location":"api-reference/models/transaction/#usage-example","title":"Usage Example","text":"<pre><code># Execute a trade\nsuccess, record = Trade.make_trade(\n    buyer=buyer_character,\n    seller=seller_character,\n    resource_id=\"artwork_123\",\n    price=100.0,\n    remaining_budget=900.0,\n    like_score=8.5,\n    emotion=\"excited\",\n    market_price=90.0,\n    expected_price=95.0,\n    final_price=100.0\n)\n\n# Access trade record\nif success:\n    print(f\"Trade completed: {record}\")\n    print(f\"Buyer: {record.buyer.name}\")\n    print(f\"Final price: {record.final_price}\")\n\n# Convert record to string\nrecord_str = TradeRecord.to_str(record)\n\n# Reconstruct record from string\nreconstructed_record = TradeRecord.from_str(record_str, character_list)\n</code></pre>"},{"location":"api-reference/models/transaction/#implementation-notes","title":"Implementation Notes","text":""},{"location":"api-reference/models/transaction/#trade-validation","title":"Trade Validation","text":"<ul> <li>Verifies buyer has sufficient funds</li> <li>Confirms resource type is valid</li> <li>Ensures resource exists in seller's inventory</li> <li>Validates ownership transfer</li> </ul>"},{"location":"api-reference/models/transaction/#resource-types","title":"Resource Types","text":"<ul> <li>Currently supports \"drawings\" resource type</li> <li>Extensible for additional resource types</li> <li>Type validation required for all trades</li> </ul>"},{"location":"api-reference/models/transaction/#transaction-process","title":"Transaction Process","text":"<ol> <li>Validates buyer's funds</li> <li>Verifies resource availability</li> <li>Transfers resource ownership</li> <li>Updates character balances</li> <li>Generates trade record</li> </ol>"},{"location":"api-reference/models/transaction/#record-format","title":"Record Format","text":"<pre><code>[resource_id]: artwork_123\n[timestamp]: 1234567890.123\n[buyer]: BuyerName\n[seller]: SellerName\n[remaining_budget]: 900.0\n[market_price]: 90.0\n[emotion]: excited\n[like_score]: 8.5\n[expected_price]: 95.0\n[final_price]: 100.0\n</code></pre>"},{"location":"api-reference/models/transaction/#value-constraints","title":"Value Constraints","text":""},{"location":"api-reference/models/transaction/#numerical-values","title":"Numerical Values","text":"<ul> <li>All prices must be positive floats</li> <li>Budget must be sufficient for transaction</li> <li>Like score typically ranges from 0 to 10</li> </ul>"},{"location":"api-reference/models/transaction/#resource-types_1","title":"Resource Types","text":"<ul> <li>Must be from supported type list</li> <li>Currently limited to \"drawings\"</li> <li>Case-sensitive validation </li> </ul>"},{"location":"api-reference/services/simulation/","title":"Simulation Service API Reference","text":"<p>\ud83d\udea7 Coming Soon! \ud83d\udea7</p> <p>This documentation is currently under development. We're working hard to provide comprehensive documentation for the Simulation Service API.</p>"},{"location":"api-reference/services/simulation/#what-to-expect","title":"What to Expect","text":"<ul> <li>Simulation lifecycle management</li> <li>Time and event handling</li> <li>Character coordination</li> <li>Environment management</li> <li>Performance optimization</li> <li>State persistence</li> </ul> <p>Check back soon for updates! </p>"},{"location":"core-concepts/building-system/","title":"Building System","text":"<p>The Building System manages all structures and locations within the simulation, handling building properties, equipment, jobs, and interactions with characters.</p>"},{"location":"core-concepts/building-system/#overview","title":"Overview","text":"<pre><code>graph TD\n    A[Building System] --&gt; B[Building Core]\n    A --&gt; C[Equipment System]\n    A --&gt; D[Job System]\n    B --&gt; E[Position Management]\n    B --&gt; F[State Management]\n    C --&gt; G[Equipment Status]\n    C --&gt; H[Equipment Functions]\n    D --&gt; I[Job Positions]\n    D --&gt; J[Applicant Management]\n</code></pre>"},{"location":"core-concepts/building-system/#core-components","title":"Core Components","text":""},{"location":"core-concepts/building-system/#building-model","title":"Building Model","text":"<p>The Building class inherits from SimsAgent, providing AI-powered interactions:</p> <pre><code>class Building:\n    def __init__(self, id, name, llm_cfg, xMin, yMin, xMax, yMax, \n                 description, instruction, equipments=None, \n                 jobs=None, money=0):\n        self.guid = id\n        self.name = name\n        self.money = money\n        self.position = (xMin, yMin, xMax, yMax)\n        self.equipments = {}  # Equipment dictionary\n        self.job_positions = {}  # Available jobs\n</code></pre>"},{"location":"core-concepts/building-system/#position-management","title":"Position Management","text":"<p>Buildings occupy specific coordinates on the map:</p> <pre><code>def cordinate_in_building(self, x, y):\n    return (self.xMin &lt;= x and x &lt;= self.xMax and \n            self.yMin &lt;= y and y &lt;= self.yMax)\n\n@property\ndef random_pos_inside(self):\n    # Returns random valid position within building\n    while True:\n        x = random.randint(self.xMin, self.xMax)\n        y = random.randint(self.yMin, self.yMax)\n        if self.map[x][y] == 1:\n            return (x, y)\n</code></pre>"},{"location":"core-concepts/building-system/#equipment-system","title":"Equipment System","text":""},{"location":"core-concepts/building-system/#equipment-model","title":"Equipment Model","text":"<pre><code>class InBuildingEquip:\n    def __init__(self, name, instruction, inbuilding=None, \n                 x=None, y=None, interactable=False, \n                 status=None, functions=None):\n        self.name = name\n        self.instruction = instruction\n        self.status = status\n        self.interactable = interactable\n        self.functions = self._setup_functions(functions)\n</code></pre> <p>Key features: - Equipment positioning within buildings - Interactable status tracking - Custom function registration - Status management</p>"},{"location":"core-concepts/building-system/#job-system","title":"Job System","text":""},{"location":"core-concepts/building-system/#job-management","title":"Job Management","text":"<pre><code>class Job:\n    def __init__(self, name, description, salary, \n                 inbuilding, num_positions):\n        self.name = name\n        self.description = description\n        self.salary = salary\n        self.inbuilding = inbuilding\n        self.applicants = []\n        self.num_positions = num_positions\n</code></pre> <p>Features: - Position tracking - Salary management - Applicant handling - Multiple position support</p>"},{"location":"core-concepts/building-system/#building-operations","title":"Building Operations","text":""},{"location":"core-concepts/building-system/#state-management","title":"State Management","text":"<p>Buildings maintain various states and properties:</p> <pre><code># Core building operations\ndef modify_internal_properties(self, prop):\n    for key, val in prop.items():\n        if key in self.modifiable_status:\n            setattr(prop, key, val)\n\ndef save_self_locally(self):\n    # Saves building state to disk\n    if self.save_dir:\n        dict2save = find_instance_specific_data_attrs(self)\n        # ... saving logic\n</code></pre>"},{"location":"core-concepts/building-system/#equipment-operations","title":"Equipment Operations","text":"<pre><code>def register_equip_functions(self, equipment):\n    if equipment.functions:\n        for func in equipment.functions:\n            self.register_callable_tools(func)\n\ndef equipment_instr(self, equip_name):\n    return f\"{self.equipments[equip_name].instruction} Current status: {self.equipments[equip_name].organize_status()}\"\n</code></pre>"},{"location":"core-concepts/building-system/#building-collections","title":"Building Collections","text":""},{"location":"core-concepts/building-system/#buildinglist-management","title":"BuildingList Management","text":"<pre><code>class BuildingList:\n    def __init__(self):\n        self.buildings = []\n\n    def get_building_by_pos(self, x, y):\n        for building in self.buildings:\n            if building.cordinate_in_building(x, y):\n                return building\n        return None\n</code></pre>"},{"location":"core-concepts/building-system/#best-practices","title":"Best Practices","text":"<ol> <li>Building Creation</li> <li>Always provide unique building IDs</li> <li>Set proper coordinate boundaries</li> <li> <p>Include clear descriptions and instructions</p> </li> <li> <p>Equipment Management</p> </li> <li>Register equipment functions properly</li> <li>Maintain equipment status</li> <li> <p>Handle equipment interactions carefully</p> </li> <li> <p>Job Management</p> </li> <li>Track position availability</li> <li>Manage applicants properly</li> <li> <p>Update salary information</p> </li> <li> <p>State Persistence</p> </li> <li>Regular state saves</li> <li>Proper serialization</li> <li>Version control for saved states</li> </ol>"},{"location":"core-concepts/building-system/#api-reference","title":"API Reference","text":"<p>For detailed API documentation, see: - Building Model API - Equipment API - Job System API </p>"},{"location":"core-concepts/character-system/","title":"Character System","text":"<p>The Character System is one of the core components of the Degent Civilization. It manages the creation, behavior, and interactions of all characters within the town simulation.</p>"},{"location":"core-concepts/character-system/#character-model","title":"Character Model","text":"<pre><code>class Character:\n    def __init__(self, name, description, occupation, location):\n        self.name = name\n        self.description = description\n        self.occupation = occupation\n        self.location = location\n        self.state = None\n        self.memories = []\n        self.relationships = {}\n        self.schedule = []\n</code></pre>"},{"location":"core-concepts/character-system/#components","title":"Components","text":""},{"location":"core-concepts/character-system/#1-basic-attributes","title":"1. Basic Attributes","text":"<ul> <li>Name: Unique identifier for the character</li> <li>Description: Physical and personality traits</li> <li>Occupation: Character's role in the town</li> <li>Location: Current building or place</li> <li>State: Current activity or status</li> <li>Schedule: Daily routine and planned activities</li> </ul>"},{"location":"core-concepts/character-system/#2-memory-system","title":"2. Memory System","text":"<p>Characters maintain memories of: - Interactions with other characters - Events they've participated in - Experiences at locations - Important information learned - Emotional responses to situations</p> <pre><code># Adding a memory\ncharacter.add_memory(\n    content=\"Had a great conversation with Sarah at the cafe\",\n    importance=0.7,\n    related_entities=[\"Sarah\", \"Cafe\"],\n    emotion=\"happy\"\n)\n\n# Retrieving memories\nrelevant_memories = character.retrieve_memories(\n    query=\"What do I know about Sarah?\",\n    limit=5\n)\n</code></pre>"},{"location":"core-concepts/character-system/#3-relationship-system","title":"3. Relationship System","text":"<p>Characters maintain relationships with: - Other characters - Buildings they frequently visit - Organizations they belong to</p> <pre><code># Managing relationships\ncharacter.update_relationship(\n    target=\"Sarah\",\n    relationship_type=\"friend\",\n    strength=0.8\n)\n\n# Checking relationships\nfriends = character.get_relationships_by_type(\"friend\")\n</code></pre>"},{"location":"core-concepts/character-system/#4-state-management","title":"4. State Management","text":"<p>Characters can be in various states: - IDLE: Default state - BUSY: Engaged in an activity - INTERACTING: Talking with others - WORKING: Performing job duties - RESTING: Taking a break</p> <pre><code># State transitions\ncharacter.change_state(\"BUSY\")\nif character.can_interact():\n    character.change_state(\"INTERACTING\")\n</code></pre>"},{"location":"core-concepts/character-system/#behavior-system","title":"Behavior System","text":""},{"location":"core-concepts/character-system/#1-decision-making","title":"1. Decision Making","text":"<p>Characters make decisions based on: - Current state - Personal goals - Memories - Relationships - Environmental factors</p> <pre><code>decision = character.make_decision(\n    context=\"Should I visit the cafe?\",\n    options=[\"go_to_cafe\", \"stay_here\"],\n    factors=[\"time\", \"energy\", \"relationships\"]\n)\n</code></pre>"},{"location":"core-concepts/character-system/#2-interaction-system","title":"2. Interaction System","text":"<p>Characters can interact through: - Conversations - Activities - Trade - Relationships - Events</p> <pre><code># Basic interaction\nresponse = character.interact_with(\n    target=\"Sarah\",\n    action=\"greet\",\n    context=\"morning meeting\"\n)\n\n# Complex interaction\ninteraction = character.start_complex_interaction(\n    target=\"Sarah\",\n    interaction_type=\"business_meeting\",\n    duration=30,\n    location=\"Office\"\n)\n</code></pre>"},{"location":"core-concepts/character-system/#3-schedule-management","title":"3. Schedule Management","text":"<p>Characters follow daily routines: - Work schedules - Break times - Social activities - Personal tasks</p> <pre><code># Setting up a schedule\ncharacter.set_schedule([\n    {\n        \"time\": \"08:00\",\n        \"action\": \"start_work\",\n        \"location\": \"Office\",\n        \"duration\": 240\n    },\n    {\n        \"time\": \"12:00\",\n        \"action\": \"lunch_break\",\n        \"location\": \"Cafe\",\n        \"duration\": 60\n    }\n])\n\n# Checking schedule\nnext_activity = character.get_next_activity()\n</code></pre>"},{"location":"core-concepts/character-system/#integration-with-other-systems","title":"Integration with Other Systems","text":""},{"location":"core-concepts/character-system/#1-building-integration","title":"1. Building Integration","text":"<p>Characters interact with buildings: - Entering/leaving - Using facilities - Working - Living</p> <pre><code># Moving to a new location\ncharacter.move_to(building)\n\n# Interacting with building\ncharacter.use_building_facility(\n    building=\"Cafe\",\n    facility=\"Coffee Machine\"\n)\n</code></pre>"},{"location":"core-concepts/character-system/#2-event-integration","title":"2. Event Integration","text":"<p>Characters participate in events: - Town festivals - Work meetings - Social gatherings - Personal events</p> <pre><code># Joining an event\ncharacter.join_event(\n    event_name=\"Summer Festival\",\n    role=\"participant\"\n)\n\n# Creating an event\ncharacter.create_event(\n    name=\"Birthday Party\",\n    location=\"Home\",\n    invited_characters=[\"Sarah\", \"John\"]\n)\n</code></pre>"},{"location":"core-concepts/character-system/#3-memory-integration","title":"3. Memory Integration","text":"<p>Characters use memories for: - Decision making - Relationship building - Conversation context - Learning</p> <pre><code># Using memories in interaction\nrelevant_context = character.get_memory_context(\n    interaction_type=\"conversation\",\n    target=\"Sarah\"\n)\n\n# Learning from experiences\ncharacter.learn_from_interaction(\n    interaction_result=\"positive\",\n    target=\"Sarah\",\n    context=\"business deal\"\n)\n</code></pre>"},{"location":"core-concepts/character-system/#advanced-features","title":"Advanced Features","text":""},{"location":"core-concepts/character-system/#1-personality-traits","title":"1. Personality Traits","text":"<p>Characters have unique personalities: - Extroversion/Introversion - Agreeableness - Conscientiousness - Emotional stability - Openness</p>"},{"location":"core-concepts/character-system/#2-emotional-system","title":"2. Emotional System","text":"<p>Characters experience emotions: - Based on interactions - Affecting decisions - Influencing relationships - Changing over time</p>"},{"location":"core-concepts/character-system/#3-learning-system","title":"3. Learning System","text":"<p>Characters can learn and adapt: - New skills - Better decisions - Relationship preferences - Behavioral patterns</p>"},{"location":"core-concepts/character-system/#api-reference","title":"API Reference","text":"<p>For detailed API documentation, see: - Character Model API - Character State API - Memory System API</p>"},{"location":"core-concepts/character-system/#examples","title":"Examples","text":"<p>Check out our Examples section for: - Character creation - Interaction scenarios - Schedule management - Complex behaviors </p>"},{"location":"core-concepts/memory-system/","title":"Memory System","text":"<p>The Memory System is a sophisticated component that enables characters to store, retrieve, and utilize experiences and information in a human-like way. It uses vector embeddings and semantic search to create a realistic memory experience.</p>"},{"location":"core-concepts/memory-system/#overview","title":"Overview","text":"<pre><code>graph TD\n    A[Memory Input] --&gt; B[Memory Processing]\n    B --&gt; C[Vector Embedding]\n    C --&gt; D[Memory Storage]\n    D --&gt; E[Memory Retrieval]\n    E --&gt; F[Memory Application]\n    B --&gt; G[Importance Scoring]\n    G --&gt; D\n    D --&gt; H[Memory Consolidation]\n    H --&gt; D\n</code></pre>"},{"location":"core-concepts/memory-system/#core-components","title":"Core Components","text":""},{"location":"core-concepts/memory-system/#1-memory-model","title":"1. Memory Model","text":"<pre><code>class Memory:\n    def __init__(self, content, importance=0.5):\n        self.content = content\n        self.importance = importance\n        self.timestamp = current_time()\n        self.embedding = None\n        self.related_entities = []\n        self.emotions = {}\n        self.context = {}\n</code></pre>"},{"location":"core-concepts/memory-system/#2-memory-manager","title":"2. Memory Manager","text":"<pre><code>class MemoryManager:\n    def __init__(self, character):\n        self.character = character\n        self.short_term_memory = []\n        self.long_term_memory = []\n        self.memory_index = None\n        self.importance_threshold = 0.3\n\n    def add_memory(self, memory):\n        if memory.importance &gt;= self.importance_threshold:\n            self.process_and_store(memory)\n\n    def retrieve_memories(self, query, limit=5):\n        return self.semantic_search(query, limit)\n</code></pre>"},{"location":"core-concepts/memory-system/#memory-types","title":"Memory Types","text":""},{"location":"core-concepts/memory-system/#1-short-term-memory","title":"1. Short-term Memory","text":"<p>Temporary storage for recent experiences: - High accessibility - Limited capacity - Temporary duration - Frequent updates</p> <pre><code>class ShortTermMemory:\n    def __init__(self, capacity=100):\n        self.memories = []\n        self.capacity = capacity\n\n    def add(self, memory):\n        if len(self.memories) &gt;= self.capacity:\n            self.consolidate_memories()\n        self.memories.append(memory)\n</code></pre>"},{"location":"core-concepts/memory-system/#2-long-term-memory","title":"2. Long-term Memory","text":"<p>Permanent storage for important information: - Persistent storage - Unlimited capacity - Organized structure - Importance-based retention</p> <pre><code>class LongTermMemory:\n    def __init__(self):\n        self.memories = {}\n        self.indexes = {}\n\n    def store(self, memory):\n        vector = self.embed_memory(memory)\n        self.memories[memory.id] = memory\n        self.indexes[memory.id] = vector\n</code></pre>"},{"location":"core-concepts/memory-system/#memory-processing","title":"Memory Processing","text":""},{"location":"core-concepts/memory-system/#1-memory-creation","title":"1. Memory Creation","text":"<pre><code>def create_memory(content, context):\n    memory = Memory(content)\n    memory.importance = calculate_importance(content, context)\n    memory.embedding = generate_embedding(content)\n    memory.context = extract_context(context)\n    return memory\n\n# Example usage\nmemory = create_memory(\n    content=\"Met Sarah at the cafe\",\n    context={\n        \"location\": \"Town Cafe\",\n        \"time\": \"morning\",\n        \"emotion\": \"happy\"\n    }\n)\n</code></pre>"},{"location":"core-concepts/memory-system/#2-importance-scoring","title":"2. Importance Scoring","text":"<pre><code>def calculate_importance(content, context, factors):\n    score = 0.0\n\n    # Content-based scoring\n    score += analyze_content_significance(content)\n\n    # Context-based scoring\n    score += evaluate_context_importance(context)\n\n    # Emotional impact\n    score += measure_emotional_impact(factors.get('emotion'))\n\n    return normalize_score(score)\n</code></pre>"},{"location":"core-concepts/memory-system/#memory-storage","title":"Memory Storage","text":""},{"location":"core-concepts/memory-system/#1-vector-database-integration","title":"1. Vector Database Integration","text":"<pre><code>class VectorStorage:\n    def __init__(self):\n        self.milvus_client = MilvusClient()\n        self.collection = None\n\n    def store_vector(self, memory_id, vector):\n        return self.milvus_client.insert(\n            collection_name=\"memories\",\n            vectors=[vector],\n            ids=[memory_id]\n        )\n</code></pre>"},{"location":"core-concepts/memory-system/#2-memory-indexing","title":"2. Memory Indexing","text":"<pre><code>class MemoryIndex:\n    def __init__(self):\n        self.index = {}\n        self.reverse_index = {}\n\n    def add_memory(self, memory):\n        # Index by time\n        self.index_by_time(memory)\n\n        # Index by entities\n        self.index_by_entities(memory)\n\n        # Index by emotions\n        self.index_by_emotions(memory)\n</code></pre>"},{"location":"core-concepts/memory-system/#memory-retrieval","title":"Memory Retrieval","text":""},{"location":"core-concepts/memory-system/#1-semantic-search","title":"1. Semantic Search","text":"<pre><code>def semantic_search(query, memories, limit=5):\n    # Generate query embedding\n    query_vector = generate_embedding(query)\n\n    # Search in vector space\n    results = vector_storage.search(\n        collection_name=\"memories\",\n        query_vectors=[query_vector],\n        limit=limit\n    )\n\n    return process_search_results(results)\n</code></pre>"},{"location":"core-concepts/memory-system/#2-context-based-retrieval","title":"2. Context-based Retrieval","text":"<pre><code>def retrieve_by_context(context, limit=5):\n    relevant_memories = []\n\n    # Filter by location\n    if 'location' in context:\n        location_memories = find_memories_by_location(\n            context['location']\n        )\n        relevant_memories.extend(location_memories)\n\n    # Filter by time\n    if 'time' in context:\n        time_memories = find_memories_by_time(\n            context['time']\n        )\n        relevant_memories.extend(time_memories)\n\n    return rank_and_limit(relevant_memories, limit)\n</code></pre>"},{"location":"core-concepts/memory-system/#memory-application","title":"Memory Application","text":""},{"location":"core-concepts/memory-system/#1-decision-making","title":"1. Decision Making","text":"<pre><code>def make_decision(situation, options):\n    # Retrieve relevant memories\n    memories = retrieve_relevant_memories(situation)\n\n    # Analyze past experiences\n    experiences = analyze_memories(memories)\n\n    # Apply memory-based reasoning\n    decision = reason_from_experiences(\n        experiences,\n        options\n    )\n\n    return decision\n</code></pre>"},{"location":"core-concepts/memory-system/#2-conversation-context","title":"2. Conversation Context","text":"<pre><code>def get_conversation_context(target, topic):\n    # Get relevant memories about target\n    target_memories = retrieve_memories_about(target)\n\n    # Get topic-related memories\n    topic_memories = retrieve_memories_about(topic)\n\n    # Combine and process memories\n    context = create_conversation_context(\n        target_memories,\n        topic_memories\n    )\n\n    return context\n</code></pre>"},{"location":"core-concepts/memory-system/#memory-maintenance","title":"Memory Maintenance","text":""},{"location":"core-concepts/memory-system/#1-memory-consolidation","title":"1. Memory Consolidation","text":"<pre><code>def consolidate_memories():\n    # Get short-term memories\n    recent_memories = get_short_term_memories()\n\n    # Group related memories\n    memory_groups = group_related_memories(recent_memories)\n\n    # Create consolidated memories\n    for group in memory_groups:\n        consolidated = create_consolidated_memory(group)\n        store_in_long_term_memory(consolidated)\n</code></pre>"},{"location":"core-concepts/memory-system/#2-memory-decay","title":"2. Memory Decay","text":"<pre><code>def apply_memory_decay():\n    for memory in all_memories:\n        # Calculate time factor\n        age = current_time() - memory.timestamp\n        decay_factor = calculate_decay_factor(age)\n\n        # Update importance\n        memory.importance *= decay_factor\n\n        # Archive or remove if below threshold\n        if memory.importance &lt; min_importance:\n            archive_memory(memory)\n</code></pre>"},{"location":"core-concepts/memory-system/#integration-examples","title":"Integration Examples","text":""},{"location":"core-concepts/memory-system/#1-basic-memory-usage","title":"1. Basic Memory Usage","text":"<pre><code># Adding a memory\ncharacter.add_memory(\n    content=\"Had coffee with Bob\",\n    importance=0.7,\n    context={\n        \"location\": \"Cafe\",\n        \"time\": \"morning\",\n        \"emotion\": \"happy\"\n    }\n)\n\n# Retrieving memories\nmemories = character.retrieve_memories(\n    query=\"What do I know about Bob?\",\n    limit=5\n)\n</code></pre>"},{"location":"core-concepts/memory-system/#2-memory-based-interaction","title":"2. Memory-based Interaction","text":"<pre><code>def handle_interaction(target, context):\n    # Get relevant memories\n    memories = retrieve_memories_about(target)\n\n    # Process memories for context\n    interaction_context = process_memories_for_interaction(\n        memories,\n        context\n    )\n\n    # Generate response\n    response = generate_response_with_context(\n        interaction_context\n    )\n\n    return response\n</code></pre>"},{"location":"core-concepts/memory-system/#best-practices","title":"Best Practices","text":"<ol> <li>Memory Creation</li> <li>Include relevant context</li> <li>Set appropriate importance</li> <li>Add emotional content</li> <li> <p>Tag related entities</p> </li> <li> <p>Memory Retrieval</p> </li> <li>Use specific queries</li> <li>Consider context</li> <li>Limit result size</li> <li> <p>Handle missing memories</p> </li> <li> <p>Memory Maintenance</p> </li> <li>Regular consolidation</li> <li>Proper decay rules</li> <li>Importance thresholds</li> <li>Backup strategies</li> </ol>"},{"location":"core-concepts/memory-system/#api-reference","title":"API Reference","text":"<p>For detailed API documentation, see: - Memory Model API - Memory Manager API - Vector Storage API </p>"},{"location":"core-concepts/overview/","title":"Core Concepts Overview","text":"<p>The Degent Civilization is built around several key concepts that work together to create a dynamic and interactive virtual town environment. This overview will introduce you to these core concepts and how they interact with each other.</p>"},{"location":"core-concepts/overview/#system-architecture","title":"System Architecture","text":"<pre><code>flowchart TD\n    Start[Start Simulation] --&gt; Init[Initialize Simulation]\n    Init --&gt; LoadConfig[Load Config Files]\n    LoadConfig --&gt; LoadLLM[Load LLM Configuration]\n    LoadLLM --&gt; LoadData[Load Frontend/Backend Data]\n\n    LoadData --&gt; CreateManagers[Create Character State Managers]\n    CreateManagers --&gt; UpdateLoop[Update Loop]\n\n    UpdateLoop --&gt; HandleMsg{Handle Server Messages}\n    HandleMsg --&gt;|New Day| ResetCountdown[Reset Newday Countdown]\n    HandleMsg --&gt;|Other Messages| FilterMsg[Filter Messages by State]\n\n    ResetCountdown --&gt; UpdateStates\n    FilterMsg --&gt; UpdateStates[Update Character States]\n\n    UpdateStates --&gt; StateChains[Execute State Chains]\n\n    StateChains --&gt; EnterChain[Enter State Chain]\n    StateChains --&gt; ExitChain[Exit State Chain]\n    StateChains --&gt; UpdateChain[Update State Chain]\n    StateChains --&gt; PostLLMChain[Post LLM Chain]\n\n    EnterChain --&gt; |Functions|BuildPrompt[Build Prompt]\n    BuildPrompt --&gt; CallLLM[Call LLM]\n\n    CallLLM --&gt; ProcessResponse[Process LLM Response]\n    ProcessResponse --&gt; StateRouter{State Router}\n\n    StateRouter --&gt;|Change State| NextState[Change to Next State]\n    StateRouter --&gt;|Stay| UpdateLoop\n\n    NextState --&gt; UpdateLoop\n\n    UpdateLoop --&gt; |Continue|HandleMsg\n    UpdateLoop --&gt; |End|End[End Simulation]\n\n    subgraph \"State Functions\"\n        EnterChain\n        ExitChain\n        UpdateChain\n        PostLLMChain\n    end\n\n    subgraph \"LLM Processing\"\n        BuildPrompt\n        CallLLM\n        ProcessResponse\n    end\n</code></pre>"},{"location":"core-concepts/overview/#key-components","title":"Key Components","text":""},{"location":"core-concepts/overview/#1-simulation","title":"1. Simulation","text":"<p>The Simulation is the main container and orchestrator of the simulation. It: - Manages all characters and buildings - Coordinates events and interactions - Maintains the simulation state - Handles time progression - Manages global resources</p>"},{"location":"core-concepts/overview/#2-characters","title":"2. Characters","text":"<p>Characters are the intelligent agents within the simulation. They: - Have personalities and traits - Maintain relationships with other characters - Follow daily routines and schedules - Interact with other characters and buildings - Store and retrieve memories - Change states based on activities</p>"},{"location":"core-concepts/overview/#3-buildings","title":"3. Buildings","text":"<p>Buildings are locations within the simulation where: - Characters can be located - Activities take place - Events can be hosted - Resources can be stored - Services can be provided</p>"},{"location":"core-concepts/overview/#4-state-management","title":"4. State Management","text":"<p>The state system: - Controls character behavior - Manages transitions between activities - Handles interruptions and priorities - Ensures realistic behavior patterns - Coordinates multi-character interactions</p>"},{"location":"core-concepts/overview/#5-memory-system","title":"5. Memory System","text":"<p>The memory system allows characters to: - Store experiences and information - Retrieve relevant memories - Influence decision making - Build relationships over time - Learn from past interactions</p>"},{"location":"core-concepts/overview/#component-interactions","title":"Component Interactions","text":""},{"location":"core-concepts/overview/#character-building-interaction","title":"Character-Building Interaction","text":"<pre><code>sequenceDiagram\n    participant C as Character\n    participant B as Building\n    participant S as Simulation\n\n    C-&gt;&gt;S: Request location change\n    S-&gt;&gt;B: Check availability\n    B-&gt;&gt;S: Confirm space\n    S-&gt;&gt;C: Update location\n    C-&gt;&gt;B: Perform activity\n</code></pre>"},{"location":"core-concepts/overview/#character-character-interaction","title":"Character-Character Interaction","text":"<pre><code>sequenceDiagram\n    participant C1 as Character 1\n    participant SM as State Manager\n    participant C2 as Character 2\n\n    C1-&gt;&gt;SM: Request interaction\n    SM-&gt;&gt;C2: Check availability\n    C2-&gt;&gt;SM: Confirm state\n    SM-&gt;&gt;C1: Enable interaction\n    C1-&gt;&gt;C2: Interact\n</code></pre>"},{"location":"core-concepts/overview/#memory-state-interaction","title":"Memory-State Interaction","text":"<pre><code>sequenceDiagram\n    participant C as Character\n    participant M as Memory System\n    participant S as State Manager\n\n    C-&gt;&gt;S: Current situation\n    S-&gt;&gt;M: Request relevant memories\n    M-&gt;&gt;S: Provide context\n    S-&gt;&gt;C: Determine action\n</code></pre>"},{"location":"core-concepts/overview/#system-flow","title":"System Flow","text":"<ol> <li>Initialization</li> <li>Town creation</li> <li>Character and building setup</li> <li>State system initialization</li> <li> <p>Memory system preparation</p> </li> <li> <p>Runtime</p> </li> <li>Time progression</li> <li>State updates</li> <li>Interaction processing</li> <li>Memory management</li> <li> <p>Event handling</p> </li> <li> <p>Interaction Processing</p> </li> <li>State checking</li> <li>Memory retrieval</li> <li>Action determination</li> <li>Response generation</li> <li>Memory storage</li> </ol>"},{"location":"core-concepts/overview/#integration-points","title":"Integration Points","text":""},{"location":"core-concepts/overview/#1-llm-integration","title":"1. LLM Integration","text":"<p>The system integrates with Large Language Models for: - Natural language processing - Decision making - Response generation - Memory summarization - Personality expression</p>"},{"location":"core-concepts/overview/#2-database-integration","title":"2. Database Integration","text":"<p>Persistent storage is used for: - Character data - Memory vectors - Relationship graphs - State history - Event logs</p>"},{"location":"core-concepts/overview/#3-external-services","title":"3. External Services","text":"<p>The system can connect with: - WebSocket for real-time updates - Redis for caching - Milvus for vector search - Custom APIs for extended functionality</p>"},{"location":"core-concepts/overview/#next-steps","title":"Next Steps","text":"<ul> <li>Learn more about the Character System</li> <li>Explore State Management</li> <li>Understand the Memory System</li> <li>Study the Building System</li> <li>Dive into Simulation Logic </li> </ul>"},{"location":"core-concepts/simulation-logic/","title":"Simulation Logic","text":"<p>The Simulation Logic system is the core engine that drives the Degent Civilization. It manages time progression, event scheduling, character behaviors, and the overall simulation state.</p>"},{"location":"core-concepts/simulation-logic/#overview","title":"Overview","text":"<pre><code>graph TD\n    A[Simulation Engine] --&gt; B[Time Management]\n    A --&gt; C[Event System]\n    A --&gt; D[Character Management]\n    A --&gt; E[World State]\n    B --&gt; F[Time Progression]\n    B --&gt; G[Schedules]\n    C --&gt; H[Event Queue]\n    C --&gt; I[Event Processing]\n    D --&gt; J[Behavior Updates]\n    D --&gt; K[Interaction Processing]\n    E --&gt; L[State Tracking]\n    E --&gt; M[Resource Management]\n</code></pre>"},{"location":"core-concepts/simulation-logic/#core-components","title":"Core Components","text":""},{"location":"core-concepts/simulation-logic/#1-simulation-engine","title":"1. Simulation Engine","text":"<pre><code>class SimulationEngine:\n    def __init__(self):\n        self.time_manager = TimeManager()\n        self.event_system = EventSystem()\n        self.character_manager = CharacterManager()\n        self.world_state = WorldState()\n        self.is_running = False\n\n    def start_simulation(self):\n        self.is_running = True\n        self.main_loop()\n\n    def main_loop(self):\n        while self.is_running:\n            self.update()\n            self.process_events()\n            self.update_characters()\n            self.time_manager.advance_time()\n</code></pre>"},{"location":"core-concepts/simulation-logic/#2-time-management","title":"2. Time Management","text":"<pre><code>class TimeManager:\n    def __init__(self):\n        self.current_time = 0\n        self.time_scale = 1.0\n        self.tick_rate = 60\n\n    def advance_time(self):\n        delta = 1.0 / self.tick_rate * self.time_scale\n        self.current_time += delta\n        self.update_scheduled_events()\n\n    def set_time_scale(self, scale):\n        self.time_scale = max(0.1, min(10.0, scale))\n</code></pre>"},{"location":"core-concepts/simulation-logic/#event-system","title":"Event System","text":""},{"location":"core-concepts/simulation-logic/#1-event-queue","title":"1. Event Queue","text":"<pre><code>class EventQueue:\n    def __init__(self):\n        self.events = []\n        self.processed_events = []\n\n    def add_event(self, event):\n        heapq.heappush(self.events, (event.time, event))\n\n    def process_next_event(self):\n        if self.events:\n            time, event = heapq.heappop(self.events)\n            if time &lt;= current_time():\n                self.process_event(event)\n</code></pre>"},{"location":"core-concepts/simulation-logic/#2-event-types","title":"2. Event Types","text":"<pre><code>class SimulationEvent:\n    def __init__(self, event_type, time, data):\n        self.type = event_type\n        self.time = time\n        self.data = data\n        self.processed = False\n\n    def process(self):\n        if self.type == \"CHARACTER_INTERACTION\":\n            self.process_character_interaction()\n        elif self.type == \"SCHEDULED_EVENT\":\n            self.process_scheduled_event()\n</code></pre>"},{"location":"core-concepts/simulation-logic/#character-management","title":"Character Management","text":""},{"location":"core-concepts/simulation-logic/#1-behavior-processing","title":"1. Behavior Processing","text":"<pre><code>class BehaviorProcessor:\n    def update_characters(self, characters):\n        for character in characters:\n            self.process_character_behavior(character)\n\n    def process_character_behavior(self, character):\n        # Update state\n        character.update_state()\n\n        # Process needs\n        character.process_needs()\n\n        # Handle interactions\n        character.process_interactions()\n\n        # Update location\n        character.update_location()\n</code></pre>"},{"location":"core-concepts/simulation-logic/#2-interaction-system","title":"2. Interaction System","text":"<pre><code>class InteractionSystem:\n    def process_interaction(self, source, target, type):\n        if self.can_interact(source, target):\n            interaction = self.create_interaction(\n                source, target, type\n            )\n            return self.execute_interaction(interaction)\n        return False\n</code></pre>"},{"location":"core-concepts/simulation-logic/#world-state-management","title":"World State Management","text":""},{"location":"core-concepts/simulation-logic/#1-state-tracking","title":"1. State Tracking","text":"<pre><code>class WorldState:\n    def __init__(self):\n        self.characters = {}\n        self.buildings = {}\n        self.events = {}\n        self.resources = {}\n\n    def update(self):\n        self.update_characters()\n        self.update_buildings()\n        self.update_resources()\n        self.check_event_triggers()\n</code></pre>"},{"location":"core-concepts/simulation-logic/#2-resource-management","title":"2. Resource Management","text":"<pre><code>class ResourceManager:\n    def __init__(self):\n        self.resources = {}\n        self.consumers = {}\n        self.producers = {}\n\n    def update_resources(self):\n        self.process_production()\n        self.process_consumption()\n        self.balance_resources()\n</code></pre>"},{"location":"core-concepts/simulation-logic/#time-based-features","title":"Time-Based Features","text":""},{"location":"core-concepts/simulation-logic/#1-schedule-management","title":"1. Schedule Management","text":"<pre><code>class ScheduleManager:\n    def __init__(self):\n        self.schedules = {}\n        self.active_tasks = {}\n\n    def add_schedule(self, entity, schedule):\n        self.schedules[entity.id] = schedule\n\n    def update_schedules(self):\n        current_time = self.get_current_time()\n        for entity_id, schedule in self.schedules.items():\n            self.process_schedule(entity_id, schedule, current_time)\n</code></pre>"},{"location":"core-concepts/simulation-logic/#2-time-based-events","title":"2. Time-Based Events","text":"<pre><code>class TimeBasedEvent:\n    def __init__(self, trigger_time, event_type, data):\n        self.trigger_time = trigger_time\n        self.event_type = event_type\n        self.data = data\n        self.recurring = False\n\n    def should_trigger(self, current_time):\n        return current_time &gt;= self.trigger_time\n</code></pre>"},{"location":"core-concepts/simulation-logic/#integration-examples","title":"Integration Examples","text":""},{"location":"core-concepts/simulation-logic/#1-basic-simulation-setup","title":"1. Basic Simulation Setup","text":"<pre><code># Initialize simulation\nsimulation = SimulationEngine()\n\n# Add characters\nsimulation.add_character(\n    Character(\"Alice\", \"Shop Owner\")\n)\nsimulation.add_character(\n    Character(\"Bob\", \"Customer\")\n)\n\n# Add buildings\nsimulation.add_building(\n    Building(\"Shop\", \"Commercial\")\n)\n\n# Start simulation\nsimulation.start()\n</code></pre>"},{"location":"core-concepts/simulation-logic/#2-event-handling","title":"2. Event Handling","text":"<pre><code># Creating and processing events\ndef handle_character_meeting():\n    event = SimulationEvent(\n        event_type=\"CHARACTER_MEETING\",\n        time=current_time() + 3600,\n        data={\n            \"characters\": [\"Alice\", \"Bob\"],\n            \"location\": \"Shop\",\n            \"duration\": 1800\n        }\n    )\n    simulation.event_system.add_event(event)\n</code></pre>"},{"location":"core-concepts/simulation-logic/#advanced-features","title":"Advanced Features","text":""},{"location":"core-concepts/simulation-logic/#1-simulation-controls","title":"1. Simulation Controls","text":"<pre><code>class SimulationControls:\n    def pause_simulation(self):\n        self.is_running = False\n        self.save_state()\n\n    def resume_simulation(self):\n        self.load_state()\n        self.is_running = True\n\n    def set_simulation_speed(self, speed):\n        self.time_manager.set_time_scale(speed)\n</code></pre>"},{"location":"core-concepts/simulation-logic/#2-state-persistence","title":"2. State Persistence","text":"<pre><code>class StatePersistence:\n    def save_state(self):\n        state = {\n            'time': self.current_time,\n            'characters': self.serialize_characters(),\n            'buildings': self.serialize_buildings(),\n            'events': self.serialize_events()\n        }\n        return self.store_state(state)\n\n    def load_state(self, state_id):\n        state = self.retrieve_state(state_id)\n        self.restore_simulation(state)\n</code></pre>"},{"location":"core-concepts/simulation-logic/#performance-optimization","title":"Performance Optimization","text":""},{"location":"core-concepts/simulation-logic/#1-update-scheduling","title":"1. Update Scheduling","text":"<pre><code>class UpdateScheduler:\n    def __init__(self):\n        self.update_frequency = {\n            'characters': 1,    # Every tick\n            'buildings': 5,     # Every 5 ticks\n            'resources': 10,    # Every 10 ticks\n            'events': 1         # Every tick\n        }\n\n    def should_update(self, component, tick):\n        return tick % self.update_frequency[component] == 0\n</code></pre>"},{"location":"core-concepts/simulation-logic/#2-spatial-partitioning","title":"2. Spatial Partitioning","text":"<pre><code>class SpatialManager:\n    def __init__(self, world_size, partition_size):\n        self.partitions = {}\n        self.setup_partitions(world_size, partition_size)\n\n    def update_entity_position(self, entity):\n        old_partition = self.get_entity_partition(entity)\n        new_partition = self.calculate_partition(entity.position)\n        self.move_entity(entity, old_partition, new_partition)\n</code></pre>"},{"location":"core-concepts/simulation-logic/#best-practices","title":"Best Practices","text":"<ol> <li>Simulation Management</li> <li>Regular state saves</li> <li>Performance monitoring</li> <li>Error handling</li> <li> <p>Load balancing</p> </li> <li> <p>Event Processing</p> </li> <li>Priority handling</li> <li>Event validation</li> <li>Error recovery</li> <li> <p>Event logging</p> </li> <li> <p>Time Management</p> </li> <li>Consistent time steps</li> <li>Time scale limits</li> <li>Schedule validation</li> <li>Time synchronization</li> </ol>"},{"location":"core-concepts/simulation-logic/#common-issues-and-solutions","title":"Common Issues and Solutions","text":""},{"location":"core-concepts/simulation-logic/#1-performance-issues","title":"1. Performance Issues","text":"<p>Problem: Simulation slowdown Solution:</p> <pre><code>def optimize_performance():\n    # Implement spatial partitioning\n    spatial_manager = SpatialManager(world_size, partition_size)\n\n    # Use update scheduling\n    update_scheduler = UpdateScheduler()\n\n    # Batch processing\n    batch_processor = BatchProcessor(batch_size=100)\n</code></pre>"},{"location":"core-concepts/simulation-logic/#2-state-consistency","title":"2. State Consistency","text":"<p>Problem: Inconsistent simulation state Solution:</p> <pre><code>def maintain_state_consistency():\n    # Regular state validation\n    state_validator = StateValidator()\n\n    # Automatic state correction\n    state_corrector = StateCorrector()\n\n    # State logging\n    state_logger = StateLogger()\n</code></pre>"},{"location":"core-concepts/simulation-logic/#api-reference","title":"API Reference","text":"<p>For detailed API documentation, see: - Simulation Engine API - Event System API - Time Management API </p>"},{"location":"core-concepts/state-management/","title":"State Management","text":"<p>The State Management system is a crucial component of the Degent Civilization that controls character behaviors, activities, and interactions through a sophisticated state machine implementation.</p>"},{"location":"core-concepts/state-management/#overview","title":"Overview","text":"<pre><code>stateDiagram-v2\n    [*] --&gt; IDLE\n    IDLE --&gt; BUSY\n    IDLE --&gt; INTERACTING\n    BUSY --&gt; IDLE\n    BUSY --&gt; INTERACTING\n    INTERACTING --&gt; IDLE\n    INTERACTING --&gt; BUSY\n    IDLE --&gt; WORKING\n    WORKING --&gt; IDLE\n    WORKING --&gt; INTERACTING\n    IDLE --&gt; RESTING\n    RESTING --&gt; IDLE\n</code></pre>"},{"location":"core-concepts/state-management/#state-types","title":"State Types","text":""},{"location":"core-concepts/state-management/#1-base-states","title":"1. Base States","text":"<pre><code>from enum import Enum\n\nclass CharacterState(Enum):\n    IDLE = auto()\n    MOVE = auto()\n    SLEEPING = auto()\n    PLAN = auto()\n    ACT = auto()\n    PERSP = auto()\n    PERSPQ = auto()\n    PERSPA = auto()\n    CRITIC = auto()\n    CHATINIT = auto()\n    CHATING = auto()\n    ACTREFLECTION = auto()\n</code></pre>"},{"location":"core-concepts/state-management/#2-composite-states","title":"2. Composite States","text":"<p>States can be combined with modifiers: - Primary state: Main activity - Secondary state: Additional context - Temporary state: Short-term condition</p> <pre><code>character.set_composite_state(\n    primary=\"WORKING\",\n    secondary=\"INTERACTING\",\n    temporary=\"STRESSED\"\n)\n</code></pre>"},{"location":"core-concepts/state-management/#state-manager","title":"State Manager","text":""},{"location":"core-concepts/state-management/#1-basic-operations","title":"1. Basic Operations","text":"<pre><code>class StateManager:\n    def __init__(self, character):\n        self.character = character\n        self.current_state = None\n        self.state_history = []\n        self.state_transitions = {}\n\n    def change_state(self, new_state):\n        if self.can_transition_to(new_state):\n            self.exit_current_state()\n            self.enter_new_state(new_state)\n\n    def can_transition_to(self, new_state):\n        return new_state in self.state_transitions.get(\n            self.current_state, []\n        )\n</code></pre>"},{"location":"core-concepts/state-management/#2-state-lifecycle","title":"2. State Lifecycle","text":"<p>Each state has three main phases: 1. Enter: Initial setup and validation 2. Update: Regular state maintenance 3. Exit: Cleanup and transition preparation</p> <pre><code>class BaseState:\n    def enter_state(self):\n        \"\"\"Called when entering the state\"\"\"\n        pass\n\n    def update_state(self):\n        \"\"\"Called every update cycle\"\"\"\n        pass\n\n    def exit_state(self):\n        \"\"\"Called when exiting the state\"\"\"\n        pass\n</code></pre>"},{"location":"core-concepts/state-management/#state-implementation","title":"State Implementation","text":""},{"location":"core-concepts/state-management/#1-idle-state","title":"1. Idle State","text":"<pre><code>class IdleState(BaseState):\n    def enter_state(self):\n        self.character.reset_activity()\n        self.character.look_for_activities()\n\n    def update_state(self):\n        if self.character.has_pending_activities():\n            self.change_state(\"BUSY\")\n\n    def exit_state(self):\n        self.character.prepare_for_activity()\n</code></pre>"},{"location":"core-concepts/state-management/#2-working-state","title":"2. Working State","text":"<pre><code>class WorkingState(BaseState):\n    def enter_state(self):\n        self.character.start_work_routine()\n        self.set_work_schedule()\n\n    def update_state(self):\n        self.character.perform_work_tasks()\n        if self.is_work_complete():\n            self.change_state(\"IDLE\")\n\n    def exit_state(self):\n        self.character.complete_work_tasks()\n</code></pre>"},{"location":"core-concepts/state-management/#state-transitions","title":"State Transitions","text":""},{"location":"core-concepts/state-management/#1-transition-rules","title":"1. Transition Rules","text":"<pre><code>class StateTransitionRules:\n    def __init__(self):\n        self.transitions = {\n            \"IDLE\": [\"BUSY\", \"INTERACTING\", \"WORKING\", \"RESTING\"],\n            \"BUSY\": [\"IDLE\", \"INTERACTING\"],\n            \"WORKING\": [\"IDLE\", \"INTERACTING\"],\n            \"INTERACTING\": [\"IDLE\", \"BUSY\", \"WORKING\"],\n            \"RESTING\": [\"IDLE\"]\n        }\n\n    def can_transition(self, from_state, to_state):\n        return to_state in self.transitions.get(from_state, [])\n</code></pre>"},{"location":"core-concepts/state-management/#2-transition-conditions","title":"2. Transition Conditions","text":"<pre><code>class TransitionCondition:\n    def __init__(self, from_state, to_state, conditions):\n        self.from_state = from_state\n        self.to_state = to_state\n        self.conditions = conditions\n\n    def check_conditions(self, character):\n        return all(\n            condition(character) \n            for condition in self.conditions\n        )\n</code></pre>"},{"location":"core-concepts/state-management/#state-behaviors","title":"State Behaviors","text":""},{"location":"core-concepts/state-management/#1-activity-management","title":"1. Activity Management","text":"<pre><code>class StateBehavior:\n    def handle_interaction(self, target):\n        if self.can_interact():\n            return self.start_interaction(target)\n        return False\n\n    def handle_interruption(self, priority):\n        if self.can_be_interrupted(priority):\n            self.pause_current_activity()\n            return True\n        return False\n</code></pre>"},{"location":"core-concepts/state-management/#2-time-management","title":"2. Time Management","text":"<pre><code>class TimeAwareState:\n    def __init__(self, duration=None):\n        self.start_time = None\n        self.duration = duration\n\n    def is_expired(self):\n        if not self.duration:\n            return False\n        return (current_time() - self.start_time) &gt;= self.duration\n</code></pre>"},{"location":"core-concepts/state-management/#integration-examples","title":"Integration Examples","text":""},{"location":"core-concepts/state-management/#1-basic-state-change","title":"1. Basic State Change","text":"<pre><code># Simple state transition\ncharacter.change_state(\"WORKING\")\n\n# Conditional state change\nif character.is_tired():\n    character.change_state(\"RESTING\")\n</code></pre>"},{"location":"core-concepts/state-management/#2-complex-state-management","title":"2. Complex State Management","text":"<pre><code># Managing work schedule\ncharacter.state_manager.schedule_state_change(\n    new_state=\"WORKING\",\n    start_time=\"09:00\",\n    duration=480  # 8 hours\n)\n\n# Handling interruptions\ncharacter.state_manager.handle_interruption(\n    new_state=\"INTERACTING\",\n    priority=\"HIGH\",\n    duration=15\n)\n</code></pre>"},{"location":"core-concepts/state-management/#3-state-based-behavior","title":"3. State-based Behavior","text":"<pre><code># State-specific actions\nif character.current_state == \"WORKING\":\n    character.perform_work_tasks()\nelif character.current_state == \"RESTING\":\n    character.recover_energy()\n</code></pre>"},{"location":"core-concepts/state-management/#advanced-features","title":"Advanced Features","text":""},{"location":"core-concepts/state-management/#1-state-priorities","title":"1. State Priorities","text":"<p>States can have different priority levels: - CRITICAL: Must be handled immediately - HIGH: Important but can wait - NORMAL: Regular activities - LOW: Can be interrupted</p>"},{"location":"core-concepts/state-management/#2-state-queuing","title":"2. State Queuing","text":"<pre><code>class StateQueue:\n    def add_state(self, state, priority):\n        self.queue.put((priority, state))\n\n    def process_next_state(self):\n        if not self.queue.empty():\n            priority, state = self.queue.get()\n            self.change_state(state)\n</code></pre>"},{"location":"core-concepts/state-management/#3-state-history","title":"3. State History","text":"<pre><code>class StateHistory:\n    def add_state_change(self, from_state, to_state):\n        self.history.append({\n            'from': from_state,\n            'to': to_state,\n            'time': current_time()\n        })\n\n    def get_recent_states(self, limit=5):\n        return self.history[-limit:]\n</code></pre>"},{"location":"core-concepts/state-management/#best-practices","title":"Best Practices","text":"<ol> <li>State Validation</li> <li>Always check if state transition is valid</li> <li>Validate state conditions before changing</li> <li> <p>Handle invalid state transitions gracefully</p> </li> <li> <p>State Duration</p> </li> <li>Set appropriate timeouts for states</li> <li>Handle state expiration properly</li> <li> <p>Consider state interruptions</p> </li> <li> <p>State Cleanup</p> </li> <li>Always cleanup resources in exit_state</li> <li>Handle incomplete activities</li> <li>Update character status properly</li> </ol>"},{"location":"core-concepts/state-management/#common-issues-and-solutions","title":"Common Issues and Solutions","text":""},{"location":"core-concepts/state-management/#1-state-lock","title":"1. State Lock","text":"<p>Problem: Character stuck in a state Solution:</p> <pre><code>def force_state_reset(character):\n    character.exit_current_state(force=True)\n    character.change_state(\"IDLE\")\n</code></pre>"},{"location":"core-concepts/state-management/#2-invalid-transitions","title":"2. Invalid Transitions","text":"<p>Problem: Illegal state transitions Solution:</p> <pre><code>def safe_state_change(character, new_state):\n    if character.can_transition_to(new_state):\n        character.change_state(new_state)\n    else:\n        character.queue_state_change(new_state)\n</code></pre>"},{"location":"core-concepts/state-management/#api-reference","title":"API Reference","text":"<p>For detailed API documentation, see: - State Manager API - State Implementation - Transition Rules</p>"},{"location":"core-concepts/state-management/#related-guides","title":"Related Guides","text":"<ul> <li>How to Add a New State </li> </ul>"},{"location":"developer-guide/code-style/","title":"Code Style Guide","text":"<p>\ud83d\udea7 Coming Soon! \ud83d\udea7</p> <p>This documentation is currently under development. We're working hard to provide comprehensive code style guidelines for DegentCivil.</p>"},{"location":"developer-guide/code-style/#what-to-expect","title":"What to Expect","text":"<ul> <li>Python coding standards</li> <li>Project structure</li> <li>Naming conventions</li> <li>Documentation requirements</li> <li>Type hints usage</li> <li>Code formatting rules</li> <li>Best practices</li> </ul> <p>Check back soon for updates! </p>"},{"location":"developer-guide/contributing/","title":"Contributing Guide","text":"<p>Welcome to the DegentCivil contributing guide! We're excited to have you as a potential contributor.</p>"},{"location":"developer-guide/contributing/#basic-principles","title":"Basic Principles","text":""},{"location":"developer-guide/contributing/#1-code-of-conduct","title":"1. Code of Conduct","text":"<ul> <li>Be respectful and inclusive</li> <li>Help others learn and grow</li> <li>Provide constructive feedback</li> <li>Follow professional communication standards</li> <li>Report inappropriate behavior</li> </ul>"},{"location":"developer-guide/contributing/#2-getting-started","title":"2. Getting Started","text":"<ol> <li>Fork the repository</li> <li>Clone your fork:    <code>bash    git clone https://github.com/your-username/DegentCivil.git</code></li> <li>Create a new branch:    <code>bash    git checkout -b feature/your-feature-name</code></li> </ol>"},{"location":"developer-guide/contributing/#3-development-workflow","title":"3. Development Workflow","text":"<ol> <li>Keep Changes Focused</li> <li>One feature/fix per pull request</li> <li>Keep changes small and manageable</li> <li> <p>Write clear commit messages</p> </li> <li> <p>Code Quality</p> </li> <li>Follow PEP 8 style guide</li> <li>Add type hints to new code</li> <li>Include docstrings for functions and classes</li> <li> <p>Maintain test coverage</p> </li> <li> <p>Testing</p> </li> <li>Run existing tests before submitting</li> <li>Add tests for new features</li> <li>Ensure all tests pass</li> </ol>"},{"location":"developer-guide/contributing/#4-pull-request-process","title":"4. Pull Request Process","text":"<ol> <li>Update your fork with the latest changes</li> <li>Run tests locally</li> <li>Push your changes</li> <li>Create a pull request with:</li> <li>Clear description</li> <li>Reference to related issues</li> <li>List of changes made</li> <li>Any breaking changes noted</li> </ol>"},{"location":"developer-guide/contributing/#5-communication","title":"5. Communication","text":"<ul> <li>Use GitHub Issues for bug reports</li> <li>Use Discussions for feature requests</li> <li>Be clear and provide context</li> <li>Follow issue/PR templates</li> </ul> <p>\ud83d\udea7 Detailed Documentation Coming Soon! \ud83d\udea7</p> <p>This documentation is currently under development. We're working hard to provide more comprehensive guidelines for contributing to DegentCivil.</p>"},{"location":"developer-guide/contributing/#what-to-expect-in-full-documentation","title":"What to Expect in Full Documentation","text":"<ul> <li>Setting up development environment</li> <li>Code contribution workflow</li> <li>Pull request guidelines</li> <li>Code review process</li> <li>Documentation standards</li> <li>Community guidelines</li> </ul> <p>Check back soon for updates! </p>"},{"location":"developer-guide/testing/","title":"Testing Guide","text":"<p>\ud83d\udea7 Coming Soon! \ud83d\udea7</p> <p>This documentation is currently under development. We're working hard to provide comprehensive testing guidelines for DegentCivil.</p>"},{"location":"developer-guide/testing/#what-to-expect","title":"What to Expect","text":"<ul> <li>Unit testing framework</li> <li>Integration testing</li> <li>Performance testing</li> <li>Test coverage requirements</li> <li>Mocking and fixtures</li> <li>CI/CD integration</li> </ul> <p>Check back soon for updates! </p>"},{"location":"examples/add_new_state/","title":"Steps to Add a New Character State","text":""},{"location":"examples/add_new_state/#basic-concepts","title":"Basic Concepts","text":"<p>Each state contains three main lifecycle methods:</p> <ol> <li><code>enter_state</code>: Executed when entering the state</li> <li><code>update_state</code>: Executed when updating the state</li> <li><code>exit_state</code>: Executed when exiting the state</li> </ol>"},{"location":"examples/add_new_state/#state-lifecycle-example","title":"State Lifecycle Example","text":"<pre><code>from app.service.character_state.base_state import BaseState\nfrom app.constants.prompt_type import PromptType\nfrom app.constants.character_state import CharacterState\n\nclass ExampleState(BaseState):\n    def __init__(self, character, character_list, building_list, on_change_state):\n        # Configure basic state properties\n        super().__init__(\n            character=character,\n            main_prompt=PromptType.EXAMPLE,  # Define the main prompt type used by the state\n            character_list=character_list,\n            building_list=building_list,\n            followed_states=[CharacterState.IDLE],  # Define subsequent states that can be transitioned to\n            on_change_state=on_change_state,\n            state_name=CharacterState.EXAMPLE  # State name\n        )\n\n    def enter_state(self, **kwargs):\n        \"\"\"Operations executed when entering the state\"\"\"\n        # Call parent class enter_state method\n        super().enter_state(**kwargs)\n        # Add specific entry logic here\n        print(f\"{self.character.name} entered example state\")\n\n    def update_state(self, msg, date, **kwargs):\n        \"\"\"Operations executed when updating the state\"\"\"\n        # Call parent class update_state method\n        return_dict = super().update_state(msg, date, **kwargs)\n        # Add specific update logic here\n        return return_dict\n\n    def exit_state(self, **kwargs):\n        \"\"\"Operations executed when exiting the state\"\"\"\n        # Call parent class exit_state method\n        success, msg = super().exit_state(**kwargs)\n        # Add specific exit logic here\n        return success, msg\n</code></pre>"},{"location":"examples/add_new_state/#adding-a-new-prompt","title":"Adding a New Prompt","text":"<p>Each state typically needs a corresponding Prompt class to handle LLM interactions. Here's an example of creating a new Prompt: BasePrompt.recordable_key will be automatically stored into working memory, a dict storing values for further state processing. </p> <pre><code>from app.llm.prompt.base_prompt import BasePrompt\n\nclass ExamplePrompt(BasePrompt):\n    # Define prompt template\n    PROMPT = '''\n    Current Character: {character_name}\n    Current Location: {location}\n\n    Please make a decision based on the following information:\n    {context}\n\n    Please return your decision in JSON format:\n    {\n        \"decision\": \"your decision\",\n        \"reason\": \"reason for decision\"\n    }\n    '''\n\n    def __init__(self, prompt_type, state):\n        super().__init__(prompt_type, state)\n        # Set keys to be recorded in working memory\n        self.recordable_key = [\"decision\", \"reason\"]\n\n    def create_prompt(self):\n        \"\"\"Create complete prompt\"\"\"\n        # Add specific prompt processing logic here\n        return self.format_attr(\n            character_name=self.character.name,\n            location=self.character.in_building_name,\n            context=\"Context information goes here\"\n        )\n</code></pre>"},{"location":"examples/add_new_state/#complete-steps","title":"Complete Steps","text":"<ol> <li>Define New Prompt Type</li> </ol> <pre><code># app/constants/prompt_type.py\nclass PromptType(Enum):\n    # ... other prompt types ...\n    EXAMPLE = auto()\n</code></pre> <ol> <li>Create New State Type</li> </ol> <pre><code># app/constants/character_state.py\nclass CharacterState(Enum):\n    # ... other states ...\n    EXAMPLE = auto()\n</code></pre> <ol> <li>Register New State</li> </ol> <pre><code># app/service/character_state/__init__.py\nfrom .example_state import ExampleState\n</code></pre> <pre><code># app/service/character_state/state_factory.py\nfrom .example_state import ExampleState\n\ndef get_initialized_states(character, change_state_callback):\n    return {\n        # ... other states ...\n        CharacterState.EXAMPLE: ExampleState(\n            character,\n            character_list,\n            building_list,\n            change_state_callback\n        ),\n    }\n</code></pre> <ol> <li>Register Prompt Class</li> </ol> <pre><code># app/service/character_state/__init__.py\nfrom .example_prompt import ExamplePrompt\n\nPromptName2Registered = {\n    # ... other prompts ...\n    PromptType.EXAMPLE: ExamplePrompt,\n}\n</code></pre>"},{"location":"examples/add_new_state/#important-notes","title":"Important Notes","text":"<ol> <li>Ensure new states include appropriate <code>followed_states</code></li> <li>Set <code>recordable_key</code> when creating Prompt class</li> <li>State transition logic should be implemented in <code>update_state</code></li> <li>Use <code>self.turn_on_states()</code> to trigger state transitions</li> </ol>"},{"location":"examples/basic-usage/","title":"Basic Usage Examples","text":""},{"location":"examples/basic-usage/#available-examples","title":"Available Examples","text":"<ul> <li>Adding a New Character State</li> <li>Trouble Shooting </li> </ul>"},{"location":"examples/troubleshooting/","title":"Debugging State and State Transitions","text":""},{"location":"examples/troubleshooting/#overview","title":"Overview","text":"<p>When developing new states or troubleshooting state transitions, you can create a debug configuration YAML file to test specific scenarios with customized working memories.</p>"},{"location":"examples/troubleshooting/#example-testing-chatingstate","title":"Example: Testing ChatingState","text":"<p>Let's examine how to debug the ChatingState class:</p> <pre><code>@register(name='CHATING', type=\"state\")\nclass ChatingState(BaseState):\n    def __init__(self, character: Character, \n                 character_list: CharacterList, \n                 building_list: BuildingList,  \n                 on_change_state, \n                 followed_states=[CharacterState.SUM],\n                 main_prompt = PromptType.CHATING,\n                 state_name = CharacterState.CHATING,\n                 arbitrary_wm=dict()\n    )    \n</code></pre>"},{"location":"examples/troubleshooting/#creating-a-debug-configuration","title":"Creating a Debug Configuration","text":"<p>You can customize state initialization arguments and working memory using a debug configuration file:</p> <pre><code># config/debug_chat.yaml\nStates:\n  Jack Brown:  \n    ACT:\n        followed_states: \n            - CHATING \n    CHATING: \n        arbitrary_wm: \n            act_obj: Emma Smith\n            init_conversation: Hi, how are you?  \n  Emma Smith:\n    IDLE: {}\n</code></pre>"},{"location":"examples/troubleshooting/#configuration-components","title":"Configuration Components","text":"<ol> <li>Character Configuration: Define states for each character under their name</li> <li>State Parameters: Customize state-specific settings</li> <li><code>followed_states</code>: Define valid state transitions</li> <li><code>arbitrary_wm</code>: Set initial working memory values</li> </ol>"},{"location":"examples/troubleshooting/#running-the-debug-configuration","title":"Running the Debug Configuration","text":"<p>Execute your simulation with the debug configuration:</p> <pre><code>DEBUG=1 python main.py configs/debug_chat.yaml\n</code></pre>"},{"location":"examples/troubleshooting/#best-practices","title":"Best Practices","text":"<ol> <li>Working Memory Testing</li> <li>Use <code>arbitrary_wm</code> to simulate different memory states</li> <li>Test edge cases and boundary conditions</li> <li> <p>Verify memory persistence across state transitions</p> </li> <li> <p>State Transitions</p> </li> <li>Configure <code>followed_states</code> to test transition paths</li> <li> <p>Verify state entry and exit conditions</p> </li> <li> <p>Character Interactions</p> </li> <li>Set up multiple characters to test interactions</li> <li>Verify message passing between states</li> <li>Test concurrent state transitions</li> </ol>"},{"location":"getting-started/installation/","title":"Installation Guide","text":"<p>This guide will walk you through the process of setting up the Degent Civilization on your system.</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following installed:</p> <ul> <li>Python 3.8 or higher</li> <li>Docker and Docker Compose</li> <li>Git</li> <li>A text editor of your choice</li> </ul>"},{"location":"getting-started/installation/#step-1-clone-the-repository","title":"Step 1: Clone the Repository","text":"<pre><code>git clone https://github.com/KingJiongEN/DegentCivil.git\ncd DegentCivil\n</code></pre>"},{"location":"getting-started/installation/#step-2-set-up-python-environment","title":"Step 2: Set Up Python Environment","text":"<p>It's recommended to use a virtual environment:</p> <pre><code>python -m venv venv\nsource venv/bin/activate  # On Windows, use: venv\\Scripts\\activate\npip install -r requirements.txt\n</code></pre>"},{"location":"getting-started/installation/#step-3-set-up-docker-services","title":"Step 3: Set Up Docker Services","text":""},{"location":"getting-started/installation/#milvus-setup","title":"Milvus Setup","text":"<ol> <li>Create directories for Milvus:</li> </ol> <pre><code>mkdir milvus\nmkdir milvus/db\nmkdir milvus/minio\n</code></pre> <ol> <li>Start Milvus using Docker Compose:</li> </ol> <pre><code>docker-compose -f docker-compose_milvus.yml up -d\n</code></pre> <p>Milvus visualization will be available at: - URL: <code>localhost:18000</code> - Username: <code>minioadmin</code> - Password: <code>minioadmin</code></p>"},{"location":"getting-started/installation/#redis-setup","title":"Redis Setup","text":"<p>Start Redis using Docker:</p> <pre><code>docker pull redis\ndocker run --name my-redis -p 6379:6379 -d redis\n</code></pre> <p>For a secured Redis instance:</p> <pre><code>docker run --name my-redis-secured -p 6379:6379 -d -v ./redis.conf:/usr/local/etc/redis/redis.conf redis redis-server /usr/local/etc/redis/redis.conf\n</code></pre>"},{"location":"getting-started/installation/#step-4-configuration","title":"Step 4: Configuration","text":"<ol> <li>Create OpenAI configuration:</li> </ol> <pre><code># Create the config directory if it doesn't exist\nmkdir -p config\n# Create OAI_CONFIG_LIST file (you'll need to edit this with your API key)\ntouch config/OAI_CONFIG_LIST\n</code></pre> <ol> <li>Set up your OpenAI API key:</li> </ol> <pre><code>export OPENAI_API_KEY=your_api_key_here\n</code></pre>"},{"location":"getting-started/installation/#step-5-verify-installation","title":"Step 5: Verify Installation","text":"<p>Run the memory demo to verify your installation:</p> <pre><code>export PYTHONPATH=\"{project_path}:$PYTHONPATH\"\npython -m app.models.memory\n</code></pre>"},{"location":"getting-started/installation/#common-issues","title":"Common Issues","text":""},{"location":"getting-started/installation/#docker-services","title":"Docker Services","text":"<p>If you encounter issues with Docker services:</p> <ol> <li>Ensure Docker daemon is running:</li> </ol> <pre><code>docker info\n</code></pre> <ol> <li>Check service status:</li> </ol> <pre><code>docker ps\n</code></pre> <ol> <li>View service logs:</li> </ol> <pre><code>docker logs my-redis\ndocker-compose -f docker-compose_milvus.yml logs\n</code></pre>"},{"location":"getting-started/installation/#python-dependencies","title":"Python Dependencies","text":"<p>If you encounter Python dependency issues:</p> <ol> <li>Ensure you're using the correct Python version:</li> </ol> <pre><code>python --version\n</code></pre> <ol> <li>Update pip:</li> </ol> <pre><code>pip install --upgrade pip\n</code></pre> <ol> <li>Reinstall dependencies:</li> </ol> <pre><code>pip install -r requirements.txt --force-reinstall\n</code></pre>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<ul> <li>Follow our Quick Start Guide to begin using the service</li> <li>Read through Core Concepts to understand the system</li> <li>Check out Examples for common use cases </li> </ul>"},{"location":"getting-started/quick-start/","title":"Quick Start Guide","text":"<p>This guide will help you get started with the Degent Civilization quickly. We'll create a simple simulation with buildings and characters.</p>"},{"location":"getting-started/quick-start/#prerequisites","title":"Prerequisites","text":"<p>Ensure you have: - Completed the installation process - Set up your OpenAI API key - Started the required services (Milvus and Redis)</p>"},{"location":"getting-started/quick-start/#basic-usage","title":"Basic Usage","text":""},{"location":"getting-started/quick-start/#1-configure-environment","title":"1. Configure Environment","text":"<p>First, set up your environment variables:</p> <pre><code>export DEBUG=1\nexport Milvus=1\n</code></pre>"},{"location":"getting-started/quick-start/#2-start-the-simulation","title":"2. Start the Simulation","text":"<pre><code>from app.service.simulation import Simulation\n\n# Initialize simulation with config files\nsimulation = Simulation(\n    state_config_file='config/states.yaml',\n    oai_config_file='OAI_CONFIG_LIST'\n)\n\n# Start the service\nsimulation.debug_service()  # For testing without frontend\n</code></pre>"},{"location":"getting-started/quick-start/#3-working-with-buildings","title":"3. Working with Buildings","text":"<pre><code># Access building list\nbuildings = simulation.building_list\n\n# Get a specific building\ncafe = buildings.get_building_by_name(\"Coffee Shop\")\n\n# Get building by position\nbuilding_at_pos = buildings.get_building_by_pos(x=10, y=10)\n</code></pre>"},{"location":"getting-started/quick-start/#4-working-with-characters","title":"4. Working with Characters","text":"<pre><code># Access character list\ncharacters = simulation.character_list\n\n# Get character state managers\nstate_managers = simulation.character_state_managers\n\n# Access specific character's state manager\ncharacter_manager = state_managers[\"Alice\"]\n</code></pre>"},{"location":"getting-started/quick-start/#example-scenarios","title":"Example Scenarios","text":""},{"location":"getting-started/quick-start/#1-character-state-management","title":"1. Character State Management","text":"<pre><code># Get character's current state\nstate_manager = simulation.character_state_managers[\"Alice\"]\ncurrent_state = state_manager.current_state.state_name\n\n# Update character state\nsimulation.update_state()\n</code></pre>"},{"location":"getting-started/quick-start/#2-message-handling","title":"2. Message Handling","text":"<pre><code># Handle server messages\nserver_msgs = simulation.handle_server_msg()\n\n# Filter messages for specific character\ncharacter_manager = simulation.character_state_managers[\"Alice\"]\nfiltered_msg = simulation.filter_out_msg(server_msgs, character_manager)\n</code></pre>"},{"location":"getting-started/quick-start/#memory-system-usage","title":"Memory System Usage","text":"<pre><code># Access character's memory\ncharacter = simulation.character_list.get_character_by_name(\"Alice\")\n\n# Store a memory\ncharacter.memory.store({\n    \"people\": {\n        \"Bob\": {\n            \"interaction\": \"Met at cafe\",\n            \"timestamp\": \"2024-03-15T10:30:00\"\n        }\n    }\n})\n\n# Retrieve memories\nmemories = character.memory.get_people_memory(\"Bob\")\n</code></pre>"},{"location":"getting-started/quick-start/#state-management","title":"State Management","text":"<pre><code># Update simulation state\nsimulation.update_state()\n\n# Save current state\nsimulation.save_state()\n</code></pre>"},{"location":"getting-started/quick-start/#next-steps","title":"Next Steps","text":"<ol> <li>Explore more complex scenarios in our Examples</li> <li>Learn about the Character System</li> <li>Understand State Management</li> <li>Check out API Reference for detailed documentation</li> </ol>"},{"location":"getting-started/quick-start/#common-operations","title":"Common Operations","text":""},{"location":"getting-started/quick-start/#building-management","title":"Building Management","text":"<pre><code># Get all buildings\nall_buildings = simulation.building_list.buildings\n\n# Find building by name\ncafe = simulation.building_list.get_building_by_name(\"Coffee Shop\")\n\n# Check if position is inside building\nis_inside = cafe.cordinate_in_building(x=5, y=5)\n</code></pre>"},{"location":"getting-started/quick-start/#character-management","title":"Character Management","text":"<pre><code># Get all characters\nall_characters = simulation.character_list.characters\n\n# Get character by name\ncharacter = simulation.character_list.get_character_by_name(\"Alice\")\n</code></pre>"},{"location":"getting-started/quick-start/#simulation-control","title":"Simulation Control","text":"<pre><code># Start simulation\nsimulation.start_service(city_state_msg)\n\n# Update simulation\nsimulation.update_state()\n\n# Save simulation state\nsimulation.save_state()\n</code></pre>"},{"location":"getting-started/quick-start/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter issues:</p> <ol> <li>Check environment variables:</li> </ol> <pre><code>echo $DEBUG\necho $Milvus\n</code></pre> <ol> <li>Verify Redis connection:</li> </ol> <pre><code>import redis\nr = redis.Redis(host='localhost', port=6379, db=0)\nprint(r.ping())\n</code></pre> <ol> <li>Check simulation status:</li> </ol> <pre><code>print(simulation.started)\nprint(simulation.total_update_count)\n</code></pre> <p>For more detailed information, refer to our Troubleshooting Guide. </p>"}]}